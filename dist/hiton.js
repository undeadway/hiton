/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/coralian/src/base/Array.js":
/*!*************************************************!*\
  !*** ./node_modules/coralian/src/base/Array.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("const { isArray, arrayClone, Null, Undefined } = __webpack_require__(/*! ../common/base */ \"./node_modules/coralian/src/common/base.js\");\r\nconst { unsupportedType, indexOutOfBounds, errorCast } = Error;\r\n\r\n/* ==================== Array 的扩展 ==================== */\r\nconst array_slice = Array.prototype.slice;\r\nif (!Array.removeEach) {\r\n\tArray.removeEach = function (array, callback) {\r\n\t\tif (!typeIs(array, Array.TYPE_NAME)) unsupportedType(array);\r\n\r\n\t\twhile ((node = array.shift()) !== undefined) {\r\n\t\t\tcallback(node);\r\n\t\t}\r\n\t};\r\n}\r\n\r\nArray.forEach = function (array, size, callback) {\r\n\tif (!typeIs(array, Array.TYPE_NAME)) unsupportedType(array);\r\n\r\n\tlet start = 0, end = array.length;\r\n\r\n\tswitch (arguments.length) {\r\n\t\tcase 2: // 表示没有 size 参数\r\n\t\t\tcallback = size;\r\n\t\t\tbreak;\r\n\t\tcase 3: // 有中间的 size 参数\r\n\t\t\tstart = size.start;\r\n\t\t\tend = size.end;\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\tif (start < 0) indexOutOfBounds(start, 0);\r\n\tif (end > array.length) indexOutOfBounds(end, array.length);\r\n\r\n\tfor (let i = start; i < end; i++) {\r\n\t\tlet result = callback(i, array[i]);\r\n\t\tif (undefined !== result) break;\r\n\t}\r\n};\r\n\r\nif (!Array.equals) {\r\n\tfunction equals(arr1, arr2) {\r\n\r\n\t\tif (!(isArray(arr2))) errorCast(arr2, Array);\r\n\t\tif (arr1.equals) return arr1.equals(arr2);\r\n\t\tif (!(isArray(arr1))) errorCast(arr1, Array);\r\n\r\n\t\tlet len = arg1.length;\r\n\t\tif (len === arr2.length) {\r\n\t\t\tfor (let i = 0; i < len; i++) {\r\n\t\t\t\t// 因为数组元素是可以任意对象类型，所以这里调用 Object.equals 来判断两者是否一致\r\n\t\t\t\tif (!Object.equals(arr1[i], arr2[i])) return false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t};\r\n\tArray.equals = equals;\r\n}\r\nif (!Array.isEmpty) {\r\n\tArray.isEmpty = function (obj) {\r\n\t\tif (obj === null || obj === undefined) return true;\r\n\t\treturn obj.length === 0;\r\n\t};\r\n}\r\nif (!Array.asObject) {\r\n\tArray.asObject = function (input) {\r\n\t\tlet obj = {};\r\n\t\tfor (let i = 0, len = input.length; i < len; i++) {\r\n\t\t\tobj[i] = input[i];\r\n\t\t}\r\n\t\treturn obj;\r\n\t};\r\n}\r\nif (!Array.has) {\r\n\tArray.has = function (input, element) {\r\n\t\tfor (let i = 0, len = input.length; i < len; i++) {\r\n\t\t\tif (Object.equals(element, input[i])) return true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n}\r\nif (!Array.find) {\r\n\tArray.find = function (input, element) {\r\n\t\tfor (let i = 0, len = this.length; i < len; i++) {\r\n\t\t\tif (Object.equals(element, input[i])) {\r\n\t\t\t\treturn i;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn -1;\r\n\t};\r\n}\r\nif (!Array.last) {\r\n\tArray.last = function (array, cnt) {\r\n\t\tlet len = array.length;\r\n\t\tif (!cnt) { // 真的最后一个位置\r\n\t\t\treturn array[len - 1];\r\n\t\t} else {\r\n\t\t\tif (!typeIs(cnt, Number.TYPE_NAME)) unsupportedType(cnt);\r\n\t\t\tif (cnt > len) indexOutOfBounds(cnt, len);\r\n\t\t\tif (cnt > 0) {\r\n\t\t\t\treturn array[len - cnt];\r\n\t\t\t} else {\r\n\t\t\t\treturn array[0 - cnt];\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n}\r\n\r\nif (!Array.of) {\r\n\tArray.of = function () {\r\n\t\treturn array_slice.call(arguments);\r\n\t};\r\n}\r\nif (!Array.clone) {\r\n\tArray.clone = arrayClone;\r\n}\r\n\r\n// 下面的代码是从 MDN 上抄的，所以 var 不修改为 let\r\nif (!Array.from) {\r\n\tArray.from = (function () {\r\n\t\tvar toStr = Object.prototype.toString;\r\n\t\tvar isCallable = function (fn) {\r\n\t\t\treturn typeof fn === Function.TYPE_NAME || toStr.call(fn) === \"[object Function]\";\r\n\t\t};\r\n\t\tvar toInteger = function (value) {\r\n\t\t\tvar number = Number(value);\r\n\t\t\tif (isNaN(number)) {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\tif (number === 0 || !isFinite(number)) {\r\n\t\t\t\treturn number;\r\n\t\t\t}\r\n\t\t\treturn (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));\r\n\t\t};\r\n\t\tvar maxSafeInteger = Math.pow(2, 53) - 1;\r\n\t\tvar toLength = function (value) {\r\n\t\t\tvar len = toInteger(value);\r\n\t\t\treturn Math.min(Math.max(len, 0), maxSafeInteger);\r\n\t\t};\r\n\r\n\t\t// The length property of the from method is 1.\r\n\t\treturn function from(arrayLike /*, mapFn, thisArg */) {\r\n\t\t\t// 1. Let C be the this value.\r\n\t\t\tvar C = this;\r\n\r\n\t\t\t// 2. Let items be ToObject(arrayLike).\r\n\t\t\tvar items = Object(arrayLike);\r\n\r\n\t\t\t// 3. ReturnIfAbrupt(items).\r\n\t\t\tif (arrayLike == null) {\r\n\t\t\t\tthrow new TypeError(\"Array.from requires an array-like object - not null or undefined\");\r\n\t\t\t}\r\n\r\n\t\t\t// 4. If mapfn is undefined, then let mapping be false.\r\n\t\t\tvar mapFn = arguments.length > 1 ? arguments[1] : void undefined;\r\n\t\t\tvar T;\r\n\t\t\tif (typeof mapFn !== Undefined.TYPE_NAME) {\r\n\t\t\t\t// 5. else      \r\n\t\t\t\t// 5. a If IsCallable(mapfn) is false, throw a TypeError exception.\r\n\t\t\t\tif (!isCallable(mapFn)) {\r\n\t\t\t\t\tthrow new TypeError(\"Array.from: when provided, the second argument must be a function\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.\r\n\t\t\t\tif (arguments.length > 2) {\r\n\t\t\t\t\tT = arguments[2];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// 10. Let lenValue be Get(items, \"length\").\r\n\t\t\t// 11. Let len be ToLength(lenValue).\r\n\t\t\tvar len = toLength(items.length);\r\n\r\n\t\t\t// 13. If IsConstructor(C) is true, then\r\n\t\t\t// 13. a. Let A be the result of calling the [[Construct]] internal method of C with an argument list containing the single item len.\r\n\t\t\t// 14. a. Else, Let A be ArrayCreate(len).\r\n\t\t\tvar A = isCallable(C) ? Object(new C(len)) : new Array(len);\r\n\r\n\t\t\t// 16. Let k be 0.\r\n\t\t\tvar k = 0;\r\n\t\t\t// 17. Repeat, while k < len… (also steps a - h)\r\n\t\t\tvar kValue;\r\n\t\t\twhile (k < len) {\r\n\t\t\t\tkValue = items[k];\r\n\t\t\t\tif (mapFn) {\r\n\t\t\t\t\tA[k] = typeof T === Undefined.TYPE_NAME ? mapFn(kValue, k) : mapFn.call(T, kValue, k);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tA[k] = kValue;\r\n\t\t\t\t}\r\n\t\t\t\tk += 1;\r\n\t\t\t}\r\n\t\t\t// 18. Let putStatus be Put(A, \"length\", len, true).\r\n\t\t\tA.length = len;\r\n\t\t\t// 20. Return A.\r\n\t\t\treturn A;\r\n\t\t};\r\n\t}());\r\n}\r\n/* ==================== Array 的扩展 ==================== */\n\n//# sourceURL=webpack://hiton/./node_modules/coralian/src/base/Array.js?");

/***/ }),

/***/ "./node_modules/coralian/src/base/Error.js":
/*!*************************************************!*\
  !*** ./node_modules/coralian/src/base/Error.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\r\n * 这里这么写的原因是 Error 和 common 之间存在关联调用\r\n * 所以只能做一个懒加载模式\r\n */\r\nlet _isNumber, _getFunctionName, _typeOf;\r\nfunction initBase () {\r\n\tlet defines = __webpack_require__(/*! ../common/base */ \"./node_modules/coralian/src/common/base.js\");\r\n\t_typeOf = defines.typeOf;\r\n\t_isNumber = defines.isNumber;\r\n\t_getFunctionName = defines.getFunctionName;\r\n}\r\nfunction typeOf (obj) {\r\n\tif (!_typeOf) {\r\n\t\tinitBase();\r\n\t}\r\n\r\n\treturn _typeOf(obj);\r\n}\r\nfunction getFunctionName () {\r\n\tif (!_getFunctionName) {\r\n\t\tinitBase();\r\n\t}\r\n\r\n\treturn _getFunctionName(obj);\r\n}\r\nfunction isNumber () {\r\n\tif (!_isNumber) {\r\n\t\tinitBase();\r\n\t}\r\n\r\n\treturn _isNumber(obj);\r\n}\r\n\r\nfunction debugError (error) {\r\n\tconsole.log(error);\r\n\tthrow error;\r\n}\r\n\r\nfunction errorCast(obj, type) {\r\n\r\n\tif (Function.TYPE_NAME !== typeof type) {\r\n\t\terrorCast(type, Function);\r\n\t}\r\n\r\n\tlet error = new TypeError();\r\n\tconsole.error(error.message);\r\n\tconsole.error(error.stack);\r\n\terror.message = typeOf(obj) + \" 类型的数据无法转变为 \" + getFunctionName(type) + \"。\";\r\n\tdebugError(error);\r\n}\r\nError.errorCast = errorCast;\r\n\r\nfunction indexOutOfBounds(given, want) {\r\n\r\n\tif (!isNumber(given)) errorCast(given, Number);\r\n\tif (!isNumber(want)) errorCast(want, Number);\r\n\r\n\tif (want < given) {\r\n\t\tdebugError(new Error(\"请求的下标 \" + given + \" 超过了上限 \" + want));\r\n\t} else {\r\n\t\tdebugError(new Error(\"请求的下标 \" + given + \" 没有达到下限 \" + want));\r\n\t}\r\n}\r\nError.indexOutOfBounds = indexOutOfBounds;\r\n\r\nfunction noReference(msg) {\r\n\r\n\tlet error = new ReferenceError();\r\n\terror.message = msg || \"当前引用错误。\";\r\n\tdebugError(error);\r\n}\r\nError.noReference = noReference;\r\n\r\nfunction unsupportedType(type) {\r\n\r\n\tlet error = new TypeError();\r\n\terror.message = typeOf(type) + \"类型的数据不被当前操作所支持。\";\r\n\tdebugError(error);\r\n}\r\nError.unsupportedType = unsupportedType;\r\n\r\nfunction unsupportedOperation(msg) {\r\n\r\n\tmsg += \" 不被支持的操作\";\r\n\tdebugError(new Error(msg));\r\n}\r\nError.unsupportedOperation = unsupportedOperation;\r\n\r\nfunction noSuchMethod(name) {\r\n\r\n\tdebugError(new Error(\"方法 \" + name + \" 不存在。\"));\r\n}\r\nError.noSuchMethod = noSuchMethod;\r\n\r\nfunction noSuchProperty(name) {\r\n\r\n\tdebugError(new Error(\"属性 \" + name + \" 不存在。\"));\r\n}\r\nError.noSuchProperty = noSuchProperty;\r\n\r\nfunction errorStatement() {\r\n\r\n\tdebugError(new Error(\"语法错误，或被执行的逻辑不正确。\"));\r\n}\r\nError.errorStatement = errorStatement;\r\n\r\nfunction illegalArguments(msg) {\r\n\r\n\tmsg = msg || \"函数参数不正确\";\r\n\tdebugError(msg);\r\n}\r\nError.illegalArguments = illegalArguments;\r\n/* ==================== Error 的扩展 ==================== */\n\n//# sourceURL=webpack://hiton/./node_modules/coralian/src/base/Error.js?");

/***/ }),

/***/ "./node_modules/coralian/src/base/Object.js":
/*!**************************************************!*\
  !*** ./node_modules/coralian/src/base/Object.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("const { keyArray, hasOwnProperty, instanceTo, objectClone, isPrimitive } = __webpack_require__(/*! ../common/base */ \"./node_modules/coralian/src/common/base.js\");\r\nconst { unsupportedType, noReference } = Error;\r\n\r\n/* ==================== Object 的扩展 ==================== */\r\nfunction objectIsEmpty(obj) {\r\n\tif (obj === null || obj === undefined) return true;\r\n\tif (obj.isEmpty) return obj.isEmpty();\r\n\tfor (let k in obj) {\r\n\t\tif (hasOwnProperty(obj, k)) return false;\r\n\t}\r\n\treturn true;\r\n};\r\nif (!Object.isEmpty) {\r\n\tObject.isEmpty = objectIsEmpty;\r\n}\r\n\r\nfunction addAll(from, to) {\r\n\r\n\tif (!typeIs(from, Object.TYPE_NAME, Array.TYPE_NAME)) unsupportedType(from);\r\n\tif (!typeIs(to, Object.TYPE_NAME, Array.TYPE_NAME)) unsupportedType(to);\r\n\r\n\tfor (let key in from) {\r\n\t\tif (hasOwnProperty(from, key)) {\r\n\t\t\tlet now = from[key];\r\n\t\t\tif (typeIs(now, Object.TYPE_NAME)) {\r\n\t\t\t\tlet _to = {};\r\n\t\t\t\taddAll(now, _to);\r\n\t\t\t\tto[key] = _to;\r\n\t\t\t} else {\r\n\t\t\t\tto[key] = from[key];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\nObject.addAll = addAll;\r\n\r\nif (!Object.keys) {\r\n\tObject.keys = function (o) {\r\n\t\tif (o !== Object(o))\r\n\t\t\tthrow new TypeError(\"Object.keys called on a non-object\");\r\n\t\tlet k = [];\r\n\t\tfor (let p in o) {\r\n\t\t\tif (hasOwnProperty(o, p)) {\r\n\t\t\t\tk.push(p);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn k.sort();\r\n\t};\r\n}\r\n\r\n// 下面的代码是从 MDN 上抄的，所以 var 不修改为 let\r\nif (!Object.values) {\r\n\tObject.values = function (o) {\r\n\t\tif (o !== Object(o))\r\n\t\t\tthrow new TypeError(\"Object.keys called on a non-object\");\r\n\t\tvar k = [];\r\n\t\tfor (let p in o) {\r\n\t\t\tif (hasOwnProperty(o, p)) {\r\n\t\t\t\tk.push(o[p]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn k.sort();\r\n\t}\r\n}\r\n\r\nfunction equals(arg1, arg2) {\r\n\r\n\tif (arg1 === arg2) return true; // 值相同、数据类型相同，或者引用的是同一块内存，或者是基本类型（数字、字符串、boolean）\r\n\r\n\tlet type1 = typeOf(arg1), type2 = typeOf(arg2);\r\n\r\n\tif (type1 !== type2) return false; // 先判断类型，类型不一致，则直接判断不等\r\n\tif (arg1 == arg2) return true; // 这句是因为可能存在 new String() !== '' 这样的情况\r\n\tif (arg1.equals) return arg1.equals(arg2);\r\n\r\n\tswitch (type1) {\r\n\t\tcase Number.NaN_TYPE_NAME:\r\n\t\t\treturn true; // 因为两个都是 NaN，直接返回 true\r\n\t\tcase Function.TYPE_NAME:\r\n\t\tcase Number.Infinity_TYPE_NAME:\r\n\t\t\treturn arg1 === arg2;\r\n\t\tcase Array.TYPE_NAME:\r\n\t\t\tif (arg1.length !== arg2.length) return false;\r\n\r\n\t\t\tfor (let i = 0, len = arg1.length; i < len; i++) {\r\n\t\t\t\tif (!Array.equals(arg1[i], arg2[i])) return false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\tcase Object.TYPE_NAME:\r\n\t\t\t// 提取对象的 KEY 为一个数组\r\n\t\t\tlet key1 = keyArray(arg1), key2 = keyArray(arg2);\r\n\t\t\tif (key1.length === key2.length) {\r\n\t\t\t\t// 直接转化为字符串判断两个 KEY 的内容是否一致\r\n\t\t\t\tif (key1.toString() === key2.toString()) {\r\n\t\t\t\t\tfor (let i = 0, len = key1.length; i < len; i++) {\r\n\t\t\t\t\t\tif (!equals(arg1[key1[i]], arg2[key2[i]])) return false; // 递归\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\tcase RegExp.TYPE_NAME:\r\n\t\t\treturn arg1.toString == arg2.toString();\r\n\t\tdefault:\r\n\t\t\t// 其余不可判断的类型全部JSON化之后判断字符串内容\r\n\t\t\treturn JSON.stringify(arg1) === JSON.stringify(arg2);\r\n\t}\r\n}\r\nObject.equals = equals;\r\n\r\nObject.forEach = (obj, callback) => {\r\n\tif (obj === null || obj === undefined) noReference();\r\n\tif (obj instanceof Map) {\r\n\t\tfor (let [key, value] of obj.entries()) {\r\n\t\t\tcallback(key, value);\r\n\t\t}\r\n\t} else {\r\n\t\tswitch (typeOf(obj)) {\r\n\t\t\tcase Array.TYPE_NAME:\r\n\t\t\t\tArray.forEach(obj, callback);\r\n\t\t\t\tbreak;\r\n\t\t\tcase Object.TYPE_NAME:\r\n\t\t\t\tfor (let k in obj) {\r\n\t\t\t\t\tif (hasOwnProperty(obj, k)) {\r\n\t\t\t\t\t\tlet result = callback(k, obj[k]);\r\n\t\t\t\t\t\tif (undefined !== result) break;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tunsupportedType(obj);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nif (!Object.mix) {\r\n\tObject.mix = function () {\r\n\t\tlet deepCpy = arguments[0],\r\n\t\t\tstart = 1;\r\n\t\tif (!typeIs(deepCpy, Boolean.TYPE_NAME)) {\r\n\t\t\tdeepCpy = false;\r\n\t\t\tstart = 0;\r\n\t\t}\r\n\r\n\t\tlet result = {};\r\n\r\n\t\tfor (let i = start; i < arguments.length; i++) {\r\n\t\t\tlet e = arguments[i];\r\n\r\n\t\t\tif (!typeIs(e, Object.TYPE_NAME)) unsupportedType(e);\r\n\r\n\t\t\tlet el = deepCpy ? JSON.parse(JSON.stringify(e)) : e;\r\n\r\n\t\t\taddAll(el, result);\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n}\r\n\r\nObject.isPrimitive = (obj) => {\r\n\tif (obj === null || obj === undefined) return true;\r\n\tlet type = obj.constructor;\r\n\r\n\treturn isPrimitive(type);\r\n};\r\n\r\nif (!Object.clone) {\r\n\tObject.clone = objectClone;\r\n}\r\n\r\nif (!Object.instanceTo) {\r\n\tObject.instanceTo = instanceTo;\r\n}\r\n/* ==================== Object 的扩展 ==================== */\n\n//# sourceURL=webpack://hiton/./node_modules/coralian/src/base/Object.js?");

/***/ }),

/***/ "./node_modules/coralian/src/base/String.js":
/*!**************************************************!*\
  !*** ./node_modules/coralian/src/base/String.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("const { typeIs } = __webpack_require__(/*! ../common/base */ \"./node_modules/coralian/src/common/base.js\");\r\n\r\n/* ==================== String 的扩展 ==================== */\r\nconst { errorCast, unsupportedType } = Error;\r\n\r\nconst EMPTY_STRING = \"\";\r\nfunction equals(from, another) {\r\n\r\n\tif (!typeIs(from, String.TYPE_NAME)) errorCast(from, String); // from 不是字符串\r\n\tif (!typeIs(another, String.TYPE_NAME)) errorCast(from, String); // another 不是字符串\r\n\r\n\tif (String(from) === String(another)) return true;\r\n\tif (from.equals) return from.equals(another);\r\n\r\n\t// 添加最后这段是为了保证其他各种因为 new 或者其他原因造成的问题\r\n\tif (from.length === another.length) {\r\n\t\tfor (let i = 0, len = from.length; i < len; i++) {\r\n\t\t\tif (from.charAt(i) !== another.charAt(i)) return false;\r\n\t\t}\r\n\t\treturn true;\r\n\t} else {\r\n\t\treturn false;\r\n\t}\r\n};\r\n\r\nif (!String.isEmpty) {\r\n\tString.isEmpty = function (input) {\r\n\r\n\t\tif (input === null || input === undefined) return true;\r\n\t\tif (!typeIs(input, String.TYPE_NAME)) unsupportedType(input);\r\n\t\tif (input.isEmpty) return input.isEmpty();\r\n\r\n\t\treturn input.length === 0 || equals(input, EMPTY_STRING); // 后面一半仅限于前半段不知道什么时候会坏掉时用\r\n\t};\r\n}\r\nif (!String.equals) {\r\n\tString.equals = equals;\r\n}\r\nif (!String.contains) {\r\n\tString.contains = function (str, input, startIndex) {\r\n\t\tif (str.contains) return str.contains(input, startIndex);\r\n\t\treturn -1 !== String.prototype.indexOf.call(str, input, startIndex);\r\n\t};\r\n}\r\n\r\nif (!String.equalsIgnoreCase) {\r\n\tString.equalsIgnoreCase = function (string, another) {\r\n\r\n\t\tif (string === another) return true;\r\n\t\tif (string.equalsIgnoreCase) return string.equalsIgnoreCase(another);\r\n\r\n\t\tif ((another !== null && another !== undefined) || string.length === another.length) {\r\n\t\t\treturn equals(string.toUpperCase(), another.toUpperCase());\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n}\r\nif (!String.endsWith) {\r\n\tString.endsWith = function (str, searchString, position) {\r\n\r\n\t\tif (str.endsWith) return str.endsWith(searchString, position);\r\n\r\n\t\tposition = position || str.length;\r\n\t\tposition = position - searchString.length;\r\n\t\tlet lastIndex = str.lastIndexOf(searchString);\r\n\t\treturn lastIndex !== -1 && lastIndex === position;\r\n\t};\r\n}\r\nString.last = function (string) {\r\n\tif (string.last) return string.last();\r\n\treturn string[string.length - 1];\r\n};\r\nString.lastCode = function (string) {\r\n\tif (string.lastCode) return string.lastCode();\r\n\treturn string.charCodeAt(string.length - 1);\r\n};\r\nif (!String.startsWith) {\r\n\tObject.defineProperty(String, \"startsWith\", {\r\n\t\tenumerable: false,\r\n\t\tconfigurable: false,\r\n\t\twritable: false,\r\n\t\tvalue: function (string, searchString, position) {\r\n\t\t\tif (string.startsWith) return string.startsWith(searchString, position);\r\n\t\t\tposition = position || 0;\r\n\t\t\treturn string.indexOf(searchString, position) === position;\r\n\t\t}\r\n\t});\r\n}\r\n\r\nfunction trimZeroWidth(str) {\r\n\tif (str.trimZeroWidth) return str.trimZeroWidth();\r\n\treturn str.replace(/\\uFEFF/, EMPTY_STRING);\r\n}\r\n\r\nif (!String.trim) {\r\n\tString.trim = function (str) {\r\n\t\tif (str.trim) return str.trim();\r\n\t\tstr = str.replace(/^\\s+|\\s+$/gm, EMPTY_STRING);\r\n\t\treturn trimZeroWidth(str);\r\n\t};\r\n}\r\nif (!String.trimLeft) {\r\n\tString.trimLeft = function (str) {\r\n\t\tif (str.trimLeft) return str.trimLeft();\r\n\t\tstr.replace(/(^\\s*)/g, EMPTY_STRING);\r\n\t\treturn trimZeroWidth(str);\r\n\t};\r\n}\r\nif (!String.trimRight) {\r\n\tString.trimRight = function (str) {\r\n\t\tif (str.trimRight) return str.trimRight();\r\n\t\tstr.replace(/(\\s*$)/g, EMPTY_STRING);\r\n\t\treturn trimZeroWidth(str);\r\n\t};\r\n}\r\n\r\n// 下面的代码是从 MDN 上抄的，所以 var 不修改为 let\r\nif (!String.compareTo) {\r\n\tString.compareTo = function (first, another) {\r\n\t\tif (first.compareTo) return first.compareTo(another);\r\n\t\tvar len1 = first.length,\r\n\t\t\tlen2 = another.length;\r\n\t\tvar max = len1 - len2;\r\n\t\tvar len = (max <= 0) ? len1 : len2;\r\n\t\tvar this_charCodeAt = first.charCodeAt;\r\n\t\tvar another_charCodeAt = another.charCodeAt;\r\n\t\tfor (let i = 0; i < len; i++) {\r\n\t\t\tlet as = this_charCodeAt(i) - another_charCodeAt(i);\r\n\t\t\tif (as !== 0) return as;\r\n\t\t}\r\n\t\treturn max;\r\n\t};\r\n}\r\nif (!String.fromCodePoint) {\r\n\t(function () {\r\n\t\tvar defineProperty = (function () {\r\n\t\t\t// IE 8 only supports `Object.defineProperty` on DOM elements\r\n\t\t\ttry {\r\n\t\t\t\tvar object = {};\r\n\t\t\t\treturn Object.defineProperty(object, object, object) && Object.defineProperty;\r\n\t\t\t} catch (error) { }\r\n\t\t}());\r\n\t\tvar stringFromCharCode = String.fromCharCode;\r\n\t\tvar floor = Math.floor;\r\n\r\n\t\tfunction fromCodePoint() {\r\n\t\t\tvar MAX_SIZE = 0x4000;\r\n\t\t\tvar codeUnits = [];\r\n\t\t\tvar highSurrogate;\r\n\t\t\tvar lowSurrogate;\r\n\t\t\tvar index = -1;\r\n\t\t\tvar length = arguments.length;\r\n\t\t\tif (!length) {\r\n\t\t\t\treturn EMPTY_STRING;\r\n\t\t\t}\r\n\t\t\tvar result = EMPTY_STRING;\r\n\t\t\twhile (++index < length) {\r\n\t\t\t\tlet codePoint = Number(arguments[index]);\r\n\t\t\t\tif (!isFinite(codePoint) || // `NaN`, `+Infinity`, or\r\n\t\t\t\t\t// `-Infinity`\r\n\t\t\t\t\tcodePoint < 0 || // not a valid Unicode code point\r\n\t\t\t\t\tcodePoint > 0x10FFFF || // not a valid Unicode code point\r\n\t\t\t\t\tfloor(codePoint) != codePoint // not an integer\r\n\t\t\t\t) {\r\n\t\t\t\t\tthrow RangeError(\"Invalid code point: \" + codePoint);\r\n\t\t\t\t}\r\n\t\t\t\tif (codePoint <= 0xFFFF) { // BMP code point\r\n\t\t\t\t\tcodeUnits.push(codePoint);\r\n\t\t\t\t} else { // Astral code point; split in surrogate halves\r\n\t\t\t\t\t// http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\r\n\t\t\t\t\tcodePoint -= 0x10000;\r\n\t\t\t\t\thighSurrogate = (codePoint >> 10) + 0xD800;\r\n\t\t\t\t\tlowSurrogate = (codePoint % 0x400) + 0xDC00;\r\n\t\t\t\t\tcodeUnits.push(highSurrogate, lowSurrogate);\r\n\t\t\t\t}\r\n\t\t\t\tif (index + 1 == length || codeUnits.length > MAX_SIZE) {\r\n\t\t\t\t\tresult += stringFromCharCode.apply(null, codeUnits);\r\n\t\t\t\t\tcodeUnits.length = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t};\r\n\t\tif (defineProperty) {\r\n\t\t\tdefineProperty(String, \"fromCodePoint\", {\r\n\t\t\t\t\"value\": fromCodePoint,\r\n\t\t\t\t\"configurable\": true,\r\n\t\t\t\t\"writable\": true\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tString.fromCodePoint = fromCodePoint;\r\n\t\t}\r\n\t}());\r\n}\r\nif (!String.prototype.codePointAt) {\r\n\t(function () {\r\n\t\t\"use strict\"; // needed to support `apply`/`call` with\r\n\t\t// `undefined`/`null`\r\n\t\tvar codePointAt = function (position) {\r\n\t\t\tif (this == null) {\r\n\t\t\t\tthrow TypeError();\r\n\t\t\t}\r\n\t\t\tvar string = String(this);\r\n\t\t\tvar size = string.length;\r\n\t\t\t// `ToInteger`\r\n\t\t\tvar index = position ? new Number(position) : 0;\r\n\t\t\tif (index != index) { // better `isNaN`\r\n\t\t\t\tindex = 0;\r\n\t\t\t}\r\n\t\t\t// Account for out-of-bounds indices:\r\n\t\t\tif (index < 0 || index >= size) return undefined;\r\n\r\n\t\t\t// Get the first code unit\r\n\t\t\tvar first = string.charCodeAt(index);\r\n\t\t\tvar second;\r\n\t\t\tif ( // check if it’s the start of a surrogate pair\r\n\t\t\t\tfirst >= 0xD800 && first <= 0xDBFF && // high surrogate\r\n\t\t\t\tsize > index + 1 // there is a next code unit\r\n\t\t\t) {\r\n\t\t\t\tsecond = string.charCodeAt(index + 1);\r\n\t\t\t\tif (second >= 0xDC00 && second <= 0xDFFF) { // low surrogate\r\n\t\t\t\t\t// http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\r\n\t\t\t\t\treturn (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn first;\r\n\t\t};\r\n\t\tObject.defineProperty(String.prototype, \"codePointAt\", {\r\n\t\t\t\"value\": codePointAt,\r\n\t\t\t\"configurable\": true,\r\n\t\t\t\"writable\": true\r\n\t\t});\r\n\t}());\r\n}\r\n\r\nconst STRING_AS_ARRAY_REGX = /[\\s\\S]/gi;\r\nString.asArray = function (input) {\r\n\treturn input.match(STRING_AS_ARRAY_REGX);\r\n};\r\n\r\nif (String.BLANK === undefined) {\r\n\tObject.defineProperty(String, \"BLANK\", {\r\n\t\tvalue: EMPTY_STRING,\r\n\t\twritable: false\r\n\t});\r\n}\r\n\r\n/*\r\n * 因为JS已经有 valueOf 函数，所以这里用 from 来实现 类似 Java 中 String.valueOf 的 功能\r\n */\r\nString.from = (obj) => {\r\n\tif (obj === null || obj === undefined) return EMPTY_STRING;\r\n\treturn (obj).valueOf();\r\n};\r\n\r\nString.lowerCamelCase = (input, mark = \"-\") => {\r\n\r\n\tif (!typeIs(input, 'string', 'array')) {\r\n\t\tunsupportedType(input);\r\n\t}\r\n\tif (typeIs(input, 'string')) {\r\n\t\tinput = input.split(mark);\r\n\t}\r\n\r\n\tlet output = [];\r\n\r\n\toutput.push(input.shift().toLowerCase());\r\n\r\n\tinput.map(item => {\r\n\t\tlet str = item.charAt(0).toUpperCase() + item.slice(1).toLowerCase();\r\n\t\toutput.push(str);\r\n\t});\r\n\r\n\treturn output.join(String.BLANK);\r\n};\r\n\r\nString.upperCamelCase = (input, mark = \"-\") => {\r\n\r\n\tif (!typeIs(input, 'string', 'array')) {\r\n\t\tunsupportedType(input);\r\n\t}\r\n\tif (typeIs(input, 'string')) {\r\n\t\tinput = input.split(mark);\r\n\t}\r\n\r\n\tlet output = [];\r\n\r\n\tinput.map(item => {\r\n\t\tlet str = item.charAt(0).toUpperCase() + item.slice(1).toLowerCase();\r\n\t\toutput.push(str);\r\n\t});\r\n\r\n\treturn output.join(String.BLANK);\r\n}\r\n/* ==================== String 的扩展 ==================== */\n\n//# sourceURL=webpack://hiton/./node_modules/coralian/src/base/String.js?");

/***/ }),

/***/ "./node_modules/coralian/src/base/others.js":
/*!**************************************************!*\
  !*** ./node_modules/coralian/src/base/others.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("const { hasOwnProperty, getFunctionName, getFunctionDefine, getType, isNumber } = __webpack_require__(/*! ../common/base */ \"./node_modules/coralian/src/common/base.js\");\r\nconst { errorCast, unsupportedType, noReference } = Error;\r\n\r\n/* ==================== Date 的扩展 ==================== */\r\nDate.toJSON = Date.toString = function (date) {\r\n\r\n\treturn date.getFullYear() + \"-\" + (date.getMonth() + 1) + \"-\" + date.getDate() + \" \" + date.getHours() + \":\" +\r\n\t\tdate.getMinutes() + \":\" + date.getSeconds();\r\n};\r\nDate.clone = function (date) {\r\n\tif (!(date instanceof Date)) {\r\n\t\terrorCast(date, Date);\r\n\t}\r\n\tlet another = new Date(date.getTime());\r\n\treturn another;\r\n};\r\n/* ==================== Date 的扩展 ==================== */\r\n/* ==================== Number 的扩展 ==================== */\r\nif (!Number.isNumber) {\r\n\tNumber.isNumber = isNumber;\r\n}\r\n\r\nNumber.equals = function (num1, num2) {\r\n\r\n\tif (!isNumber(num1)) unsupportedType(num1);\r\n\tif (!isNumber(num2)) unsupportedType(num2);\r\n\r\n\treturn num1 == num2;\r\n};\r\nNumber.from = (obj) => {\r\n\tif (!isNumber(obj)) return NaN;\r\n\r\n\treturn Number(obj);\r\n\t// return (obj).toString();\r\n};\r\n/* ==================== Number 的扩展 ==================== */\r\n/* ==================== Function 的扩展 ==================== */\r\nif (!Function.getName) {\r\n\tFunction.getName = getFunctionName;\r\n}\r\n\r\nif (!Function.EMPTY_BODY) {\r\n\tObject.defineProperty(Function, \"EMPTY_BODY\", {\r\n\t\tvalue: () => { },\r\n\t\twritable: false\r\n\t});\r\n}\r\n\r\nif (!Function.getStatic) {\r\n\tFunction.getStatic = (func) => {\r\n\r\n\t\tlet statics = {};\r\n\r\n\t\tfor (let k in func) {\r\n\t\t\tif (hasOwnProperty(func, k)) {\r\n\t\t\t\tstatics[k] = func[k];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn Object.isEmpty(statics) ? undefined : statics;\r\n\t}\r\n}\r\n\r\nFunction.getDefine = (func) => {\r\n\treturn getFunctionDefine(getFunctionName(func), func.count);\r\n};\r\n/* ==================== Function 的扩展 ==================== */\r\n/* ==================== Map 的扩展 ==================== */\r\n/* ==================== Map 的扩展 ==================== */\r\nif (!Map.isEmpty) {\r\n\tMap.isEmpty = function (map) {\r\n\t\treturn map.size === 0;\r\n\t}\r\n}\r\nif (!Map.equals) {\r\n\tMap.equals = collectionIsSame;\r\n}\r\n/* ==================== Set 的扩展 ==================== */\r\nif (!Set.isEmpty) {\r\n\tSet.isEmpty = (set) => {\r\n\t\treturn set.size === 0;\r\n\t};\r\n}\r\nif (!Set.equals) {\r\n\tSet.equals = collectionIsSame;\r\n}\r\n/* ==================== Set 的扩展 ==================== */\r\nfunction collectionIsSame(c1, c2) {\r\n\r\n\tif (c1 === c2) return true;\r\n\tif (Function.getName(getType(c1)) !== Function.getName(getType(c2))) return false;\r\n\tif (c1.size !== c2.size) return false;\r\n\r\n\tlet c1Iter = c1[Symbol.iterator]();\r\n\tlet c2Iter = c2[Symbol.iterator]();\r\n\r\n}\n\n//# sourceURL=webpack://hiton/./node_modules/coralian/src/base/others.js?");

/***/ }),

/***/ "./node_modules/coralian/src/base sync recursive ^\\.\\/.*$":
/*!*******************************************************!*\
  !*** ./node_modules/coralian/src/base/ sync ^\.\/.*$ ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var map = {\n\t\"./Array\": \"./node_modules/coralian/src/base/Array.js\",\n\t\"./Array.js\": \"./node_modules/coralian/src/base/Array.js\",\n\t\"./Error\": \"./node_modules/coralian/src/base/Error.js\",\n\t\"./Error.js\": \"./node_modules/coralian/src/base/Error.js\",\n\t\"./Object\": \"./node_modules/coralian/src/base/Object.js\",\n\t\"./Object.js\": \"./node_modules/coralian/src/base/Object.js\",\n\t\"./String\": \"./node_modules/coralian/src/base/String.js\",\n\t\"./String.js\": \"./node_modules/coralian/src/base/String.js\",\n\t\"./others\": \"./node_modules/coralian/src/base/others.js\",\n\t\"./others.js\": \"./node_modules/coralian/src/base/others.js\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./node_modules/coralian/src/base sync recursive ^\\\\.\\\\/.*$\";\n\n//# sourceURL=webpack://hiton/./node_modules/coralian/src/base/_sync_^\\.\\/.*$?");

/***/ }),

/***/ "./node_modules/coralian/src/common/base.js":
/*!**************************************************!*\
  !*** ./node_modules/coralian/src/common/base.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\n\r\nconst side = typeof (window) !== \"undefined\"; // 设置端点，side = true 客户端 side = false 服务端\r\n\r\nconst SIDE_ONLY_FMT_STR = \"只能在%s中使该功能用\";\r\nexports.browserOnly = () => {\r\n\tif (!side) throw new Error(formatString(SIDE_ONLY_FMT_STR, \"浏览器\"));\r\n}\r\n\r\nexports.serverOnly = () => {\r\n\tif (side) throw new Error(formatString(SIDE_ONLY_FMT_STR, \"服务端\"));\r\n}\r\n\r\nexports.side = side;\r\n\r\nconst _isArray = exports.isArray = (Array.isArray) ? Array.isArray :\r\n\t(arr) => {\r\n\t\treturn arr && (arr instanceof Array ||\r\n\t\t\t(typeof arr === Object.TYPE_NAME &&\r\n\t\t\t\ttypeof arr.length === Number.TYPE_NAME &&\r\n\t\t\t\tarr.propertyIsEnumerable(\"length\")));\r\n\t};\r\n\r\nconst keyArray = exports.keyArray = (Object.keys) ? Object.keys :\r\n\t(obj) => {\r\n\t\tlet keys = [];\r\n\t\tfor (let k in obj) {\r\n\t\t\tif (obj.hasOwnProperty(k)) {\r\n\t\t\t\tkeys.push(k);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn keys;\r\n\t};\r\n\r\n\r\nconst isNumber = exports.isNumber = (number, notation = 10) => {\r\n\r\n\tif (number !== number) return false;\r\n\r\n\tif (notation === 16 && !String.startsWith((number).toString().toLowerCase(), \"0x\")) {\r\n\t\tnumber = \"0x\" + number;\r\n\t}\r\n\r\n\treturn isFinite(number);\r\n}\r\n\t\r\nconst formatString = exports.formatString = (str, ...obj) => {\r\n\r\n\tif (!obj) unsupportedOperation(\"至少需要一个字符来进行替换\");\r\n\r\n\tif (Object.TYPE_NAME === typeOf(obj[0])) {\r\n\t\tstr = replaceElement(str, obj[0]);\r\n\t} else {\r\n\t\tObject.forEach(obj, function (i, e) {\r\n\t\t\tstr = str.replace(/\\%s/, e);\r\n\t\t});\r\n\t}\r\n\r\n\treturn str;\r\n}\r\n\r\nconst Types = {\r\n\tisNumberObject: (obj) => {\r\n\t\ttry {\r\n\t\t\treturn obj.valueOf && isNumber(obj.valueOf()) && (obj !== obj.valueOf());\r\n\t\t} catch (e) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t},\r\n\tisBooleanObject: (obj) => {\r\n\t\ttry {\r\n\t\t\tlet val = obj.valueOf();\r\n\t\t\treturn obj.valueOf && (val === true || val === false) && (obj !== obj.valueOf());\r\n\t\t} catch (e) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t},\r\n\tisStringObject: (obj) => {\r\n\t\ttry {\r\n\t\t\treturn obj.valueOf && (obj.valueOf() === obj.toString()) && (obj !== obj.valueOf());\r\n\t\t} catch (e) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t},\r\n\tisRegExp: (obj) => {\r\n\t\treturn obj instanceof RegExp;\r\n\t},\r\n\tisDate: (obj) => {\r\n\t\treturn obj instanceof Date;\r\n\t},\r\n\tisSet: (obj) => {\r\n\t\treturn obj instanceof Set;\r\n\t},\r\n\tisWeakSet: (obj) => {\r\n\t\treturn obj instanceof WeakSet;\r\n\t},\r\n\tisMap: (obj) => {\r\n\t\treturn obj instanceof Map;\r\n\t},\r\n\tisWeakMap: (obj) => {\r\n\t\treturn obj instanceof WeakMap;\r\n\t},\r\n};\r\n\r\n\r\n\r\nfunction Null () {}\r\nfunction Undefined () {};\r\n\r\nconst nullObj = new Null();\r\nconst undefinedObj = new Undefined();\r\n\r\nObject.defineProperties(nullObj,  {\r\n\t\"TYPE_NAME\": {\r\n\t\tvalue: \"null\",\r\n\t\twritable: false\r\n\t},\r\n\t\"getValue\": {\r\n\t\tvalue: () => {\r\n\t\t\treturn null;\r\n\t\t},\r\n\t\twritable: false\r\n\t}\r\n});\r\nObject.defineProperties(undefinedObj,  {\r\n\t\"TYPE_NAME\": {\r\n\t\tvalue: \"undefined\",\r\n\t\twritable: false\r\n\t},\r\n\t\"getValue\": {\r\n\t\tvalue: () => {\r\n\t\t\treturn undefined;\r\n\t\t},\r\n\t\twritable: false\r\n\t}\r\n});\r\n\r\nexports.Null = nullObj;\r\nexports.Undefined = undefinedObj;\r\n\r\n/**\r\n * 用于得到数据类型\r\n * 一般以 string 类型返回数据类型的值\r\n * 数据类型判断不依照 JS 规则，而是以以下基准判断\r\n * Object.NULL_TYPE_NAME === typeOf(null)\r\n * Object.UNDEFINED_TYPE_NAME === typeOf(undefined)\r\n * Boolean.TYPE_NAME === typeOf(boolean)\r\n * Number.NaN_TYPE_NAME === typeOf(NaN) 仅用于 NaN ，如果提供的是 '12X' 则直接判断为字符串\r\n * Number.Infinity_TYPE_NAME === typeOf(Infinity) 仅用于 Infinity 和 -Infinity，其他可用字面量表达的数字判断为 number\r\n * Number.TYPE_NAME === typeOf(number)\r\n * String.TYPE_NAME === typeOf(string)\r\n * Function.TYPE_NAME === typeOf(function)\r\n * Object.TYPE_NAME === typeOf(object)\r\n * Array.TYPE_NAME === typeOf(array)\r\n * RegExp.TYPE_NAME === typeOf(regexp)\r\n * Date.TYPE_NAME === typeOf(date)\r\n * Set.TYPE_NAME === typeOf(set)\r\n * WeakSet.TYPE_NAME === typeOf(weakset)\r\n * Map.TYPE_NAME === typeOf(map)\r\n * WeakMap.TYPE_NAME === typeOf(weakmap)\r\n * Symbol.TYPE_NAME === typeOf(symbol)\r\n * \r\n * String、Number、Boolean 这三种可以被包装的对象也当成字面量来进行判断，而不返回 object\r\n * 即\r\n * String.TYPE_NAME === typeOf(new String());\r\n * Number.TYPE_NAME === typeOf(new Number());\r\n * Boolean.TYPE_NAME === typeOf(new Boolean());\r\n * \r\n * 只判断 JS 内置的数据类型格式\r\n * 不会判断各种自定义数据类型，这些类型都将被辨认为 object\r\n * \r\n * @returns\r\n */\r\n function typeOf(object) {\r\n\tlet result;\r\n\r\n\tif (object === null) {\r\n\t\tresult = nullObj.TYPE_NAME;\r\n\t} else if (object === undefined) {\r\n\t\tresult = undefinedObj.TYPE_NAME;\r\n\t} else if (_isArray(object)) {\r\n\t\tresult = Array.TYPE_NAME;\r\n\t} else if (object !== object) {\r\n\t\tresult = NaN.TYPE_NAME;\r\n\t} else if (object === Infinity || object === -Infinity) {\r\n\t\tresult = Infinity.TYPE_NAME;\r\n\t} else if (Types.isRegExp(object)) {\r\n\t\tresult = RegExp.TYPE_NAME;\r\n\t} else if (Types.isNumberObject(object)) { // new Number\r\n\t\tresult = Number.TYPE_NAME;\r\n\t} else if (Types.isBooleanObject(object)) { // new Boolean\r\n\t\tresult = Boolean.TYPE_NAME;\r\n\t} else if (Types.isStringObject(object)) { // new String\r\n\t\tresult = String.TYPE_NAME;\r\n\t} else if (Types.isDate(object)) {\r\n\t\tresult = Date.TYPE_NAME;\r\n\t} else if (Types.isSet(object)) {\r\n\t\tresult = Set.TYPE_NAME;\r\n\t} else if (Types.isWeakSet(object)) {\r\n\t\tresult = WeakSet.TYPE_NAME;\r\n\t} else if (Types.isMap(object)) {\r\n\t\tresult = Map.TYPE_NAME;\r\n\t} else if (Types.isWeakMap(object)) {\r\n\t\tresult = WeakMap.TYPE_NAME;\r\n\t// } else if (Types.isWeakMap(object)) {\r\n\t// \tresult = WeakMap.TYPE_NAME;\r\n\t// } else if (Types.isWeakMap(object)) {\r\n\t// \tresult = WeakMap.TYPE_NAME;\r\n\t} else {\r\n\t\tresult = typeof object;\r\n\t\tif (result === Number.TYPE_NAME && isNaN(object)) { // 以防有漏网之鱼\r\n\t\t\tresult = Number.NaN_TYPE_NAME\r\n\t\t}\r\n\t}\r\n\r\n\treturn result;\r\n}\r\nexports.typeOf = typeOf;\r\n\r\n__webpack_require__(/*! ./../base/Error */ \"./node_modules/coralian/src/base/Error.js\");\r\nconst { errorCast, noReference, unsupportedType, indexOutOfBounds, unsupportedOperation, noSuchMethod } = Error;\r\nconst { Char } = JsConst;\r\n\r\nconst typeTo = {\r\n\ttoString: () => {\r\n\t\treturn this.name.toLowerCase();\r\n\t}\r\n}\r\n\r\n/*\r\n * 第一个参数是需要被比较的 Object 对象\r\n * 从第二个参数开始是一个可变长参数，可以传入任意多字符串参数表达数据类型，\r\n * 只要其中一个和被比较对象的结果一致，则返回 ture 当全部不符合的时候，返回 false 。\r\n */\r\nfunction typeIs(object, ...types) {\r\n\r\n\tlet type = typeOf(object);\r\n\t// let _types = types;\r\n\r\n\t// if (arguments.length === 2 && typeof types === String.TYPE_NAME) {\r\n\t// \treturn type === types;\r\n\t// } else if (!_isArray(types) && arguments.length > 2) {\r\n\t// \t_types = Array.prototype.slice.call(arguments, 1);\r\n\t// }\r\n\treturn new Set(types).has(type);\r\n}\r\nexports.typeIs = typeIs;\r\n\r\nconst LOOP_REG_START = \"#{\",\r\n\tLOOP_REG_END = \"#{/\",\r\n\tLOOP_IN_START = \"#:{\";\r\nconst LOOP_REG_START_L = LOOP_REG_START.length;\r\nconst DEFAULT_PREFIX = \"${\",\r\n\tDEFAULT_SURFIX = \"}\";\r\n\r\nfunction replaceElement(str, obj, prefix = DEFAULT_PREFIX, surfix = DEFAULT_SURFIX) {\r\n\r\n\tif (!typeIs(str, String.TYPE_NAME)) errorCast(str, String);\r\n\r\n\tlet ret = String.BLANK,\r\n\t\tp1 = 0,\r\n\t\tp2 = 0;\r\n\twhile (true) {\r\n\t\tp1 = str.indexOf(prefix, p2);\r\n\t\tif (p1 === -1) break;\r\n\t\tif (p1 > p2) {\r\n\t\t\tret += str.substring(p2, p1);\r\n\t\t}\r\n\t\tp2 = str.indexOf(surfix, p1 + prefix.length);\r\n\t\tif (p2 === -1) break;\r\n\t\tlet holder = str.substring(p1 + prefix.length, p2);\r\n\t\tlet nests = holder.split(Char.POINT);\r\n\t\tlet val = obj;\r\n\t\tfor (let i = 0, length = nests.length; i < length; i++) {\r\n\t\t\tval = val[nests[i]];\r\n\t\t\tif (!val) break;\r\n\t\t}\r\n\t\tif (null !== val && undefined !== val) {\r\n\t\t\t// 如果目标对象中不包含请求内容，则清空表达\r\n\t\t\tret += val;\r\n\t\t}\r\n\t\tp2 = p2 + surfix.length;\r\n\t}\r\n\tif (p1 === -1) {\r\n\t\tret += str.substring(p2, str.length);\r\n\t} else {\r\n\t\tif (p2 === -1) {\r\n\t\t\tret += str.substring(p1, str.length);\r\n\t\t}\r\n\t}\r\n\treturn ret;\r\n}\r\nreplaceElement.LOOP_REG_START = LOOP_REG_START;\r\nreplaceElement.LOOP_REG_END = LOOP_REG_END;\r\nreplaceElement.LOOP_IN_START = LOOP_IN_START;\r\nreplaceElement.LOOP_REG_START_L = LOOP_REG_START_L;\r\nreplaceElement.DEFAULT_PREFIX = DEFAULT_PREFIX;\r\nreplaceElement.DEFAULT_SURFIX = DEFAULT_SURFIX;\r\n\r\nexports.replaceElement = replaceElement;\r\n\r\n/*\r\n * [ERR:20170310] 将 nodejs 更新至 v6.10.0 之后有些时候会出现 hasOwnProperty 错误。\r\n * 错误信息：TypeError: hasOwnProperty is not a function\r\n * 原因未知。\r\n * 所以暂时用这种方式来解决问题\r\n * \r\n * 一种解释，仅供参考：\r\n * https://stackoverflow.com/questions/53978067/hasownproperty-is-not-a-function-in-node-js\r\n */\r\nfunction hasOwnProperty(obj, keyName) {\r\n\treturn Object.prototype.hasOwnProperty.call(obj, keyName);\r\n}\r\nexports.hasOwnProperty = hasOwnProperty;\r\n\r\nfunction instanceTo(instance, type) {\r\n\r\n\tlet prototype = type.prototype;\r\n\r\n\tif (prototype) {\r\n\t\tinstance.__proto__ = prototype;\r\n\t\tinstance.constructor = prototype.constructor;\r\n\t}\r\n}\r\nexports.instanceTo = instanceTo;\r\n\r\nconst getFunctionName = exports.getFunctionName = (func) => {\r\n\r\n\tlet functionName = String.BLANK;\r\n\tlet _name = func.name;\r\n\tif (_name !== undefined) {\r\n\t\tfunctionName = _name;\r\n\t} else {\r\n\t\tlet arr = null,\r\n\t\t\tstr = func.toString();\r\n\t\tif (str.charAt(0) === Char.SquareBracket.LEFT) {\r\n\t\t\tarr = str.match(/\\[\\w+\\s*(\\w+)\\]/);\r\n\t\t} else {\r\n\t\t\tarr = str.match(/function\\s*(\\w+)/);\r\n\t\t}\r\n\t\tif (arr && arr.length === 2) {\r\n\t\t\tfunctionName = arr[1];\r\n\t\t}\r\n\t}\r\n\r\n\treturn functionName;\r\n}\r\n\r\nconst ARG_MARK = \"arg\";\r\nconst getFunctionDefine = exports.getFunctionDefine = (name, count) => {\r\n\tlet _d = [];\r\n\tfor (let i = 0; i < count; i++) {\r\n\t\t_d.push(ARG_MARK + i);\r\n\t}\r\n\r\n\tlet pars = _d.join();\r\n\treturn `function ${name}${Char.Parenthe.LEFT}${pars}${Char.Parenthe.RIGHT}${Char.SEMICOLON}`;\r\n}\r\n\r\nexports.newInstance = (type, args) => {\r\n\r\n\tlet obj = {};\r\n\tlet ret = type.apply(obj, args);\r\n\tlet instance = typeIs(ret, Object.TYPE_NAME) ? ret : obj;\r\n\r\n\treturn instanceTo(instance, type);\r\n}\r\n\r\nfunction arrayClone(array) {\r\n\r\n\tlet output = [];\r\n\r\n\tfor (let i = 0, len = array.length; i < len; i++) {\r\n\t\toutput.push(objectClone(array[i]));\r\n\t}\r\n\r\n\treturn output;\r\n}\r\nexports.arrayClone = arrayClone;\r\n\r\nfunction objectClone(obj) {\r\n\r\n\tif (obj === null || obj === undefined) return obj;\r\n\tif (obj !== obj) return obj; // NaN\r\n\tif (typeIs(obj, String.TYPE_NAME, Number.TYPE_NAME, Number.Infinity_TYPE_NAME, \r\n\t\tBoolean.TYPE_NAME, RegExp.TYPE_NAME, Function.TYPE_NAME)) return obj;\r\n\tif (obj.clone) return obj.clone();\r\n\r\n\tif (_isArray(obj)) {\r\n\t\treturn arrayClone(obj);\r\n\t} else {\r\n\t\tlet another = {};\r\n\t\tfor (let key in obj) {\r\n\t\t\tif (hasOwnProperty(obj, key)) {\r\n\t\t\t\tanother[key] = objectClone(obj[key]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 将新建对象的原型链关联到旧对象上，保证两者看起来一致\r\n\t\tinstanceTo(another, getType(obj));\r\n\r\n\t\treturn another;\r\n\t}\r\n};\r\nexports.objectClone = objectClone;\r\n\r\nfunction Iterator(obj) {\r\n\tif (obj === null || obj === undefined) noReference();\r\n\r\n\tlet isArray = _isArray(obj);\r\n\tif (!isArray && !typeIs(obj, Object.TYPE_NAME)) unsupportedType(obj);\r\n\r\n\tlet keys = keyArray(obj);\r\n\tlet index = 0,\r\n\t\tcount = keys.length;\r\n\r\n\tthis.hasNext = function () {\r\n\t\treturn index < count;\r\n\t};\r\n\tthis.next = function () {\r\n\t\tlet key = keys[index++];\r\n\t\tif (isArray) {\r\n\t\t\treturn key;\r\n\t\t} else {\r\n\t\t\treturn obj[key];\r\n\t\t}\r\n\t};\r\n\tthis.first = function () {\r\n\t\treturn keys[0];\r\n\t};\r\n\tthis.last = function () {\r\n\t\treturn keys[count - 1];\r\n\t};\r\n\tthis[\"goto\"] = function (index) {\r\n\t\tif (index < 0) {\r\n\t\t\tindexOutOfBounds(index, 0);\r\n\t\t}\r\n\t\tif (index >= count) {\r\n\t\t\tindexOutOfBounds(index, count);\r\n\t\t}\r\n\t};\r\n\tthis.forward = function (cnt) {\r\n\t\tlet at = index + cnt;\r\n\t\tif (at < 0) {\r\n\t\t\tindexOutOfBounds(at, 0);\r\n\t\t}\r\n\t\tif (at >= count) {\r\n\t\t\tindexOutOfBounds(at, count);\r\n\t\t}\r\n\t\tindex = at;\r\n\t};\r\n}\r\n\r\nexports.Iterator = Iterator;\r\n\r\nfunction Constructor(type, name, callback, isFunction) {\r\n\r\n\t// 参数个数\r\n\tlet count = type.length,\r\n\t\t// 获得定义\r\n\t\tdefine = getFunctionDefine(name, count);\r\n\r\n\tthis.getDefine = function () {\r\n\t\treturn define;\r\n\t};\r\n\tthis.parameterCount = function () {\r\n\t\treturn count;\r\n\t};\r\n\tthis.newInstance = function () {\r\n\t\tcallback();\r\n\t\tif (!isFunction) {\r\n\t\t\treturn newInstance(type, arguments);\r\n\t\t} else {\r\n\t\t\treturn new type();\r\n\t\t}\r\n\t};\r\n}\r\n\r\n/*\r\n * 布尔类型 布尔表示一个逻辑实体，可以有两个值： true 和 false 。\r\n * Null 类型 Null 类型只有一个值： null ，更多详情可查看 null 和Null 。\r\n * Undefined 类型 ...\r\n * 数字类型 ...\r\n * 字符串类型 ...\r\n * 符号类型 ... \r\n */\r\nfunction isPrimitive(type) {\r\n\treturn (type === String || type === Number || type === Boolean || type === Symbol);\r\n}\r\nexports.isPrimitive = isPrimitive;\r\n\r\nfunction Type(obj) {\r\n\r\n\t// 对象的数据类型\r\n\tlet type = obj.constructor || Object,\r\n\t\t// 对象的原型\r\n\t\tprototype = obj.prototype || Object;\r\n\r\n\t// 是否是基本数据类型\r\n\tlet _isPrimitive = isPrimitive(type),\r\n\t\t// 是否是接口\r\n\t\t_isInterface = isInterface(obj),\r\n\t\t// 是否是数组\r\n\t\tisArray = _isArray(obj),\r\n\t\tisFunction = (type === Function),\r\n\t\t// 是否是字面量对象\r\n\t\tisLiteral = (type === Object || _isPrimitive || isArray || type === RegExp);\r\n\r\n\t// 类型的名字\r\n\tlet name = getFunctionName(type);\r\n\r\n\tfunction constructorCheck() {\r\n\t\tif (isLiteral || _isPrimitive) {\r\n\t\t\tthrow new Error(\"请使用字面量来构造对象\");\r\n\t\t}\r\n\t\tif (_isInterface) {\r\n\t\t\tthrow new Error(\"请使用 Coralian.util.Interface 类的 newInterface 方法来构造接口\");\r\n\t\t}\r\n\t}\r\n\r\n\tthis.getName = function () {\r\n\t\treturn name;\r\n\t};\r\n\tthis.getStatic = type.getStatic;\r\n\tthis.isLiteral = function () {\r\n\t\treturn isLiteral;\r\n\t};\r\n\tthis.isArray = function () {\r\n\t\treturn isArray;\r\n\t};\r\n\tthis.isInterface = function () {\r\n\t\treturn _isInterface;\r\n\t};\r\n\tthis.isPrimitive = function () {\r\n\t\treturn isPrimitive;\r\n\t};\r\n\tthis.isFunction = function () {\r\n\t\treturn isFunction;\r\n\t};\r\n\t// TODO 这两个到底是个什么还没想好\r\n\t//\t\t\tthis.invoke = function() {\r\n\t//\t\t\t\tif (isFunction) {\r\n\t//\t\t\t\t\treturn type.apply(null, arguments);\r\n\t//\t\t\t\t} else {\r\n\t//\t\t\t\t\tunsupportedOperation(typeOf(type) + \"不是函数\");\r\n\t//\t\t\t\t}\r\n\t//\t\t\t},\r\n\tthis.newInstance = function () {\r\n\t\tconstructorCheck();\r\n\t\tif (!isFunction) {\r\n\t\t\treturn newInstance(type);\r\n\t\t} else {\r\n\t\t\treturn new type();\r\n\t\t}\r\n\t};\r\n\tthis.getPrototype = function () {\r\n\t\treturn prototype;\r\n\t};\r\n\tthis.typeIs = function () {\r\n\t\treturn typeIs(obj, arguments);\r\n\t};\r\n\tthis.instanceOf = function (classType) {\r\n\t\treturn type === classType || type instanceof classType;\r\n\t};\r\n\tthis.getConstructor = function () {\r\n\t\treturn new Constructor(type, name, constructorCheck, isFunction);\r\n\t};\r\n}\r\n\r\nlet getType = exports.getType = (obj) => {\r\n\treturn new Type(obj);\r\n}\r\n\r\nfunction Interface(name, methods) {\r\n\tfor (let i = 0, len = methods.length; i < len; i++) {\r\n\t\tlet method = methods[i];\r\n\t\tif (!typeIs(method, String.TYPE_NAME)) errorCast(method, String);\r\n\t}\r\n\tthis.getName = function () {\r\n\t\treturn name;\r\n\t};\r\n\tthis.iterator = function () {\r\n\t\treturn new Iterator(methods);\r\n\t};\r\n}\r\n\r\nfunction newInterface(name, methods) {\r\n\tif (arguments.length === 1) throw new Error(\"构建接口至少定义一个方法\");\r\n\r\n\tif (!Array.isArray(methods)) {\r\n\t\tmethods = array_slice.call(arguments, 1);\r\n\t}\r\n\r\n\treturn new Interface(name, methods);\r\n}\r\n\r\nfunction isInterface(obj) {\r\n\treturn obj instanceof Interface;\r\n}\r\n\r\nexports.Interface = {\r\n\tnewInterface: newInterface,\r\n\tensureImplements: function (object) {\r\n\t\tif (arguments.length < 2) throw new Error(\"判定对象是否是实现某接口，必须先提供至少一个被判定的接口\");\r\n\r\n\t\tfor (let i = 1, len = arguments.length; i < len; i++) {\r\n\t\t\tlet target = arguments[i];\r\n\t\t\tif (!isInterface(target)) errorCast(object, Interface);\r\n\r\n\t\t\tlet iterator = target.iterator();\r\n\t\t\twhile (iterator.hasNext()) {\r\n\t\t\t\tlet name = iterator.next();\r\n\t\t\t\tlet method = object[name];\r\n\t\t\t\tif (!method || !typeIs(method, Function.TYPE_NAME)) noSuchMethod(name);\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\tisInterface: isInterface,\r\n\tCollection: newInterface(\"Collection\", // 接口名称\r\n\t\t[\"add\", // add 方法，添加元素\r\n\t\t\t\"clear\", // clear 方法，清空元素\r\n\t\t\t\"exists\", // exists 方法，判断元素是否存在于集合中\r\n\t\t\t\"existsAll\", // existsAll 方法，判断元素集合是否都存在于集合中\r\n\t\t\t\"equals\", // equals 方法，判断元素是否和集合是否相同，由各个实现类各自实现具体需求\r\n\t\t\t\"isEmpty\", // isEmpty 方法，判断集合是否为空\r\n\t\t\t\"remove\", // remove 方法，删除某个指定的元素\r\n\t\t\t\"size\", // size 方法，获得集合的大小（元素个数）\r\n\t\t\t\"toArray\" // toArray 方法，将集合转化成数组\r\n\t\t])\r\n}\n\n//# sourceURL=webpack://hiton/./node_modules/coralian/src/common/base.js?");

/***/ }),

/***/ "./node_modules/coralian/src/index.js":
/*!********************************************!*\
  !*** ./node_modules/coralian/src/index.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("var __dirname = \"/\";\n/**\r\n * 自定义函数集/类库\r\n * <p>\r\n * 主要实现两个功能 <br />\r\n * 1.针对 JS 自身的不足，补足相关功能、添加部分数据类型 <br />\r\n * 设计方针基本符合《 JavaScript 语言精粹 》中的要求 <br />\r\n * &nbsp;&nbsp;&nbsp;&nbsp;不同的是因为要设计一些数据类型（Map、Set、Interface、Collection、XmlWrapper）等<br />\r\n * &nbsp;&nbsp;&nbsp;&nbsp;所以保留了对 new 关键字的使用<br />\r\n * 2.简单化功能封装 <br />\r\n * &nbsp;&nbsp;&nbsp;&nbsp;包括对一些 JS 中不尽人意的地方进行了封装，或者重新写了一些相适用的方法 / 函数集合\r\n * </p>\r\n * 所有实现均为对 ECMAScript 的扩展，不包含任何 window、document 操作<br />\r\n * 适用浏览器\r\n * <ul>\r\n * <li>Firefox</li>\r\n * <li>Chrome</li>\r\n * <li>Opera</li>\r\n * <li>Edge</li>\r\n * </ul>\r\n */\r\n\r\n/*\r\n * 这些属于 JS 的基本类库扩展，不用导入Coralian命名空间\r\n */\r\n__webpack_require__(/*! jsconst */ \"./node_modules/jsconst/src/index.js\");\r\nconst lib = {};\r\n\r\nconst { side, browserOnly, serverOnly, typeOf, typeIs, Null,Undefined } = __webpack_require__(/*! ./common/base */ \"./node_modules/coralian/src/common/base.js\");\r\n\r\nlet that = null, // 定义 全局变量 that，node 中等价于 global 浏览器中等价于 window\r\n\tn_eval = null; // 将 eval 函数的指针赋值给本地局部变量（暂时不知道能干嘛，保留指针）\r\n\r\n/*\r\n * 因为服务端（Nodejs）和客户端（浏览器）有不一样的地方 所以这里分别为服务端和客户端添加载入 Coralian\r\n * 库所必需的函数或者一些方便调试的函数 通过 try... catch 块来分别执行 服务端和 客户端所需要加载的内容\r\n */\r\nif (side) {\r\n\tthat = window; // 初始化客户端\r\n\tthat.global = window;\r\n\r\n\t// 如果客户端没有实现 console.log 则用 window.alert 来代为实现相关功能\r\n\tif (!window.console) {\r\n\t\tthat.console = {\r\n\t\t\tlog: that.alert,\r\n\t\t\terr: that.alert,\r\n\t\t\twarn: that.alert\r\n\t\t};\r\n\t} else if (!window.console.log) {\r\n\t\tthat.console.log = that.alert\r\n\t}\r\n\r\n\t// 前端借用 webpack 的 require.context 函数进行自动挂载文件 \r\n\tconst base = __webpack_require__(\"./node_modules/coralian/src/base sync recursive ^\\\\.\\\\/.*$\");\r\n\tbase.keys().forEach(key => {\r\n\t\tbase(key);\r\n\t});\r\n\tconst _lib = __webpack_require__(\"./node_modules/coralian/src/lib sync recursive ^\\\\.\\\\/.*$\");\r\n\t_lib.keys().forEach(key => {\r\n\t\t/^\\.\\/(((?!\\.js).)+)?(.js)?$/.test(key);\r\n\t\tif (!lib[RegExp.$1]) {\r\n\t\t\tlib[key.replace(\"./\", \"\")] = _lib(key);\r\n\t\t}\r\n\t});\r\n\r\n} else {\r\n\tthat = __webpack_require__.g;\r\n\tthat.alert = function (msg) {\r\n\t\tif (String.contains(msg, Error.TYPE_NAME)) {\r\n\t\t\tconsole.log(new Error());\r\n\t\t}\r\n\t\tconsole.log(msg);\r\n\t};\r\n\r\n\t// 后端采用 nodejs 的 fs 模块进行文件挂载\r\n\ttry { // 套 try catch 的目的时因为前端打包时可能找不到 fs 模块\r\n\t\tconst fs = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'fs'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\r\n\t\tconst base = fs.readdirSync(`${__dirname}/base`);\r\n\t\tbase.map((file) => {\r\n\t\t\tfile = file.split(\".\")[0];\r\n\t\t\t__webpack_require__(\"./node_modules/coralian/src/base sync recursive ^\\\\.\\\\/.*$\")(`./${file}`);\r\n\t\t});\r\n\t\tconst _lib = fs.readdirSync(`${__dirname}/lib`);\r\n\t\t_lib.map((file) => {\r\n\t\t\tfile = file.split(\".\")[0];\r\n\t\t\tlib[file] = __webpack_require__(\"./node_modules/coralian/src/lib sync recursive ^\\\\.\\\\/.*$\")(`./${file}`);\r\n\t\t});\r\n\t} finally {\r\n\t}\r\n}\r\n\r\nconst { noReference, unsupportedType } = Error;\r\n\r\n// 将 typeOf 和 typeIs 分别添加到全局对象\r\nthat.typeOf = typeOf;\r\nthat.typeIs = typeIs;\r\nthat.Null = Null;\r\nthat.Undefined = Undefined;\r\n\r\nfunction setToGlobal(parent, pkg, obj) {\r\n\r\n\tlet name = pkg[0];\r\n\tif (pkg.length > 1) {\r\n\t\tlet sub = parent[name];\r\n\t\tif (!sub) {\r\n\t\t\tsub = parent[name] = {};\r\n\t\t}\r\n\t\tsetToGlobal(sub, pkg.slice(1), obj);\r\n\t} else {\r\n\t\tparent[name] = obj;\r\n\t}\r\n}\r\n\r\nconst Coralian = {\r\n\tABOUT: 'Coralian',\r\n\tVERSION: '0.0.22',\r\n\tHOMEPAGE: 'http://codes.waygc.net/project/?coralian',\r\n\tAUTHOR: 'hzwaygc@gmail.com',\r\n\tside: function () {\r\n\t\treturn side;\r\n\t},\r\n\tisBrowser: () => {\r\n\t\treturn side;\r\n\t},\r\n\t/*\r\n\t * 下面两个方法是用来描述作用环境的\r\n\t * 如果判断执行环境非作用环境，则抛出异常。\r\n\t */\r\n\tbrowserOnly: browserOnly,\r\n\tserverOnly: serverOnly,\r\n\t/*\r\n\t * 这组函数主要是用来实现将对象设置到 global 中用\r\n\t * 和计划的解耦客户-服务端的不同方式，自己调用一个函数就可以的目的有些不同\r\n\t * 这里更希望能实现一个类似 Java Class.forName 这样的一个功能\r\n\t */\r\n\tsetToGlobal: function (name, obj) {\r\n\r\n\t\tif (obj === null || obj === undefined) noReference();\r\n\t\tif (!typeIs(name, String.TYPE_NAME)) unsupportedType(name);\r\n\t\tif (String.isEmpty(name)) throw new Error(\"不能使用空字符串作为属性名\");\r\n\r\n\t\tsetToGlobal(that, name.split(\".\"), obj);\r\n\t},\r\n\texports: function (name, obj) {\r\n\t\tsetExports(that, name, obj);\r\n\t}\r\n};\r\n\r\nObject.assign(Coralian, lib);\r\n\r\nthat.Coralian = Coralian;\n\n//# sourceURL=webpack://hiton/./node_modules/coralian/src/index.js?");

/***/ }),

/***/ "./node_modules/coralian/src/lib/Calendar.js":
/*!***************************************************!*\
  !*** ./node_modules/coralian/src/lib/Calendar.js ***!
  \***************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("const { hasOwnProperty, formatString } = __webpack_require__(/*! ./../common/base */ \"./node_modules/coralian/src/common/base.js\");\r\nconst { unsupportedType, unsupportedOperation, errorCast } = Error;\r\nconst { isNumber } = Number;\r\n\r\n// 一天的毫秒数\r\nconst ONE_DAY_MILLISECONDS = 24 * 3600 * 1000;\r\n// 默认对时间进行格式化\r\nconst DEFAULT_DT_FORMAT = \"YYYY-MM-DD hh:mm:ss\";\r\n\r\n// 中文的周几\r\nconst LONG_CHINESE_WEEK = [\"星期日\", \"星期一\", \"星期二\", \"星期三\", \"星期四\", \"星期五\", \"星期六\"],\r\n\tSHORT_CHINESE_WEEK = [\"周日\", \"周一\", \"周二\", \"周三\", \"周四\", \"周五\", \"周六\"];\r\n// 地支\r\nconst EARTHLY_BRANCH = [\"子\", \"丑\", \"寅\", \"卯\", \"辰\", \"巳\", \"午\", \"未\", \"申\", \"酉\", \"戌\", \"亥\"];\r\n// 天干\r\nconst CELESTIAL_STEM = [\"甲\", \"乙\", \"丙\", \"丁\", \"戊\", \"己\", \"庚\", \"辛\", \"壬\", \"癸\"];\r\n// 生肖\r\nconst CHINESE_ZODIAC = [\"鼠\", \"牛\", \"虎\", \"兔\", \"龙\", \"蛇\", \"马\", \"羊\", \"猴\", \"鸡\", \"狗\", \"猪\"];\r\nconst SEXAGENARY_CYCLE_FIRST = 4; // 公元 4年 甲子年\r\n// 英文的周几\r\nconst ENGLISH_WEEK = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n// 中文的几月\r\nconst CHINESE_MONTH = [\"一月\", \"二月\", \"三月\", \"四月\", \"五月\", \"六月\", \"七月\", \"八月\", \"九月\", \"十月\", \"十一月\", \"十二月\"];\r\n// 英文的几月\r\nconst ENGLISH_MONTH = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"Augst\", \"September\",\r\n\t\"October\", \"November\", \"December\"\r\n];\r\n// 一个月有几天\r\nconst MONTH_DAYS = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\r\nconst CHINESE_CALANER = [\"zh\", \"xq\", \"yue\", \"nian\"],\r\n\tONE_COUNT = [\"M\", \"D\", \"h\", \"m\", \"s\"];\r\nconst TEN = 10,\r\n\tTWELVE = 12,\r\n\tTHIRTY = 30,\r\n\tSEVEN = 7,\r\n\tTWENTY_NINE = 29,\r\n\tTHIRTH_ONE = 31;\r\n\r\nfunction formatTime(date, format) {\r\n\tif (!(date instanceof Date)) {\r\n\t\terrorCast(date, Date);\r\n\t}\r\n\tformat = format || DEFAULT_DT_FORMAT;\r\n\tvar tmpMonth = date.getMonth();\r\n\tvar tmpDay = date.getDay();\r\n\tvar o = {\r\n\t\t\"(YY)+\": date.getFullYear(),\r\n\t\t\"M+\": (tmpMonth + 1), // month\r\n\t\t\"yue\": CHINESE_MONTH[tmpMonth],\r\n\t\t\"month\": ENGLISH_MONTH[tmpMonth],\r\n\t\t\"mon\": ENGLISH_MONTH[tmpMonth].slice(0, 3),\r\n\t\t\"D+\": date.getDate(), // day\r\n\t\t\"h+\": date.getHours(), // hour\r\n\t\t\"m+\": date.getMinutes(), // minute\r\n\t\t\"s+\": date.getSeconds(), // second\r\n\t\t\"ms\": date.getMilliseconds(), // millisecond\r\n\t\t\"zh\": SHORT_CHINESE_WEEK[tmpDay],\r\n\t\t\"xq\": LONG_CHINESE_WEEK[tmpDay],\r\n\t\t\"w\": ENGLISH_WEEK[tmpDay].slice(0, 3),\r\n\t\t\"week\": ENGLISH_WEEK[tmpDay]\r\n\t};\r\n\r\n\tfor (let k in o) {\r\n\t\tif (hasOwnProperty(o, k)) {\r\n\r\n\t\t\tlet regExp = new RegExp(\"(\" + k + \")\");\r\n\t\t\tif (regExp.test(format)) {\r\n\t\t\t\tlet regxVal = format.match(regExp)[0];\r\n\t\t\t\tlet val = o[k];\r\n\t\t\t\tif (Array.has(CHINESE_CALANER, k)) {\r\n\t\t\t\t\tformat = format.replace(regxVal, val);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (!Array.has(ONE_COUNT, RegExp.$1) && val < 10) {\r\n\t\t\t\t\t\tval = \"0\" + val;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tformat = format.replace(regxVal, val);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn format;\r\n}\r\n\r\nfunction instanceTime(arg, format) {\r\n\tif (!arg) {\r\n\t\treturn new Date();\r\n\t} else if (arg instanceof Date) {\r\n\t\treturn arg;\r\n\t} else if (isNumber(arg)) {\r\n\t\tlet _date = new Date();\r\n\t\tformat = format || 8;\r\n\t\tswitch (format) {\r\n\t\t\tcase 0:\r\n\t\t\t\t_date.setFullYear(arg);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\t_data.setYear(arg);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\t_data.setMonth(parseInt(arg) - 1);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 4:\r\n\t\t\t\t_data.setDate(arg);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 6:\r\n\t\t\t\t_date.setYear(parseInt(arg / 10000));\r\n\t\t\t\t_date.setMonth(parseInt(arg / 100) % 100 - 1);\r\n\t\t\t\t_date.setDate(arg % 100);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 8:\r\n\t\t\t\t_date.setFullYear(parseInt(arg / 10000));\r\n\t\t\t\t_date.setMonth(parseInt(arg / 100) % 100 - 1);\r\n\t\t\t\t_date.setDate(arg % 100);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 16:\r\n\t\t\t\t_date.setTime(arg);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tunsupportedOperation(\"所选择的格式化参数不正确\");\r\n\t\t}\r\n\t\treturn _date;\r\n\t} else {\r\n\t\tunsupportedType(arg);\r\n\t}\r\n}\r\n\r\nfunction isLeapYear(year) {\r\n\treturn (year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0));\r\n}\r\n\r\nfunction checkMonthIsValid(month) {\r\n\tif (!isNumber(month)) errorCast(month, Number);\r\n\tif (month < 1 || 12 < month) unsupportedOperation(month + \" 不是一个合法的月份\");\r\n}\r\n\r\nfunction checkYearIsValid(year) {\r\n\tif (!isNumber(year)) errorCast(year, Number);\r\n}\r\n\r\nfunction getMonthDays(year, month) {\r\n\r\n\tvar _isLeapYear = isLeapYear(year);\r\n\r\n\treturn (month === 1 && _isLeapYear) ? TWENTY_NINE : MONTH_DAYS[month];\r\n}\r\n\r\nmodule.exports = exports = {\r\n\t/**\r\n\t * 得到一定时间内的日历（公历表示，农历暂时不考虑）\r\n\t * 得到一个二维表格，每行为7 第一天之前留空，最后剩余留空\r\n\t * \r\n\t * 示例效果如下：\r\n\t * [ [null, null, 1, 2, 3, 4, 5],\r\n\t * [6, 7, 8, 9, 10, 11, 12],\r\n\t * [13, 14, 15, 16, 17, 18, 19],\r\n\t * [20, 21, 22, 23, 24, 25, 26],\r\n\t * [27, 28, 29, 30, null, null, null] ]\r\n\t * \r\n\t * 本函数只有两种重载：\r\n\t *  1 参数指定：year，month，得到 year 年 month 月的月历\r\n\t *  2 无参，得到当前月的月历\r\n\t */\r\n\tmonthly: function (year, month) {\r\n\r\n\t\tvar date = year;\r\n\t\tif (year instanceof Date) {\r\n\t\t\tmonth = year.getMonth();\r\n\t\t\tyear = year.getFullYear();\r\n\t\t} else {\r\n\t\t\tif (year) {\r\n\t\t\t\tcheckYearIsValid(year);\r\n\t\t\t}\r\n\t\t\tif (month) {\r\n\t\t\t\tcheckMonthIsValid(month);\r\n\t\t\t\tmonth -= 1;\r\n\t\t\t}\r\n\t\t\tdate = new Date();\r\n\t\t\tif (year) {\r\n\t\t\t\tdate.setYear(year);\r\n\t\t\t}\r\n\t\t\tif (month) {\r\n\t\t\t\tdate.setMonth(month);\r\n\t\t\t}\r\n\t\t}\r\n\t\tdate.setDate(1); // 月历固定每个月1号\r\n\t\tvar weekDay = date.getDay();\r\n\r\n\t\tvar days = 0,\r\n\t\t\tresult = [],\r\n\t\t\tmonthDays = getMonthDays(year, month);\r\n\r\n\t\twhile (true) {\r\n\t\t\tif (days >= monthDays) break;\r\n\t\t\tlet week = [null, null, null, null, null, null, null];\r\n\t\t\tfor (let i = weekDay; i < 7; i++) {\r\n\t\t\t\tif (++days <= monthDays) {\r\n\t\t\t\t\tweek[i] = days;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tweekDay = 0;\r\n\t\t\tresult.push(week);\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t},\r\n\t/*\r\n\t * today 代表目标日期，如果没有这个参数默认取“今天” week\r\n\t * 代表要取的下一个星期几，如果没有这个参数默认取下一个星期天\r\n\t */\r\n\tnextWeekDay: function (week, today) {\r\n\t\tvar now = new Date();\r\n\t\tif (today) {\r\n\t\t\tnow.setDate(today);\r\n\t\t}\r\n\t\tweek = 7 - (week || now.getDay());\r\n\r\n\t\treturn new Date(now.getTime() + ONE_DAY_MILLISECONDS * week);\r\n\t},\r\n\t// 返回被格式化之后的当前时间\r\n\tgetTime: function (time, format) {\r\n\t\tif (time && !typeIs(time, Number.TYPE_NAME)) {\r\n\t\t\ttime = parseInt(time);\r\n\t\t}\r\n\t\treturn formatTime(instanceTime(time, 16), format);\r\n\t},\r\n\tformatTime: formatTime,\r\n\tinstanceTime: instanceTime,\r\n\tisLeapYear: function (year) {\r\n\r\n\t\tif (!isNumber(year)) {\r\n\t\t\terrorCast(year, Number);\r\n\t\t}\r\n\r\n\t\treturn isLeapYear(year);\r\n\t},\r\n\tgetMonthDays: function (year, month) {\r\n\r\n\t\tcheckYearIsValid(year);\r\n\t\tcheckMonthIsValid(month);\r\n\r\n\t\treturn getMonthDays(year, month);\r\n\t},\r\n\tgetWeekDay: function (time, format) {\r\n\t\treturn formatString(instanceTime(time, format || 16));\r\n\t},\r\n\t// 获得农历表示法\r\n\tChineseCalendar: {\r\n\t\tgetChineseZodiac: function (year) {\r\n\t\t\tcheckYearIsValid(year);\r\n\t\t\treturn CHINESE_ZODIAC[(year - CHINESE_SEXAGENARY_CYCLE_FIRST) % TWELVE];\r\n\t\t},\r\n\t\tgetCelestialStem: function (year) {\r\n\t\t\tcheckYearIsValid(year);\r\n\t\t\tvar stem = CELESTIAL_STEM[(year - SEXAGENARY_CYCLE_FIRST) % TEN] +\r\n\t\t\t\tEARTHLY_BRANCH[(year - SEXAGENARY_CYCLE_FIRST) % TWELVE];\r\n\r\n\t\t\treturn stem;\r\n\t\t},\r\n\t\t/*\r\n\t\t * 农历年表示法暂时不支持\r\n\t\t */\r\n\t\tgetSpringFestival: function (year) {\r\n\t\t\t// checkYearIsValid(year);\r\n\t\t\tunsupportedOperation(\"暂不支持农历年表示法\");\r\n\t\t},\r\n\t\tgetMonthlyCalendar: function (year) {\r\n\t\t\t// checkYearIsValid(year);\r\n\t\t\tunsupportedOperation(\"暂不支持农历年表示法\");\r\n\r\n\t\t}\r\n\t}\r\n};\r\n\r\nObject.defineProperty(exports, \"YYYY\", ({\r\n\tvalue: 0,\r\n\twritable: false\r\n}));\r\nObject.defineProperty(exports, \"YY\", ({\r\n\tvalue: 1,\r\n\twritable: false\r\n}));\r\nObject.defineProperty(exports, \"Month\", ({\r\n\tvalue: 2,\r\n\twritable: false\r\n}));\r\nObject.defineProperty(exports, \"Date\", ({\r\n\tvalue: 4,\r\n\twritable: false\r\n}));\r\nObject.defineProperty(exports, \"YYMMDD\", ({\r\n\tvalue: 6,\r\n\twritable: false\r\n}));\r\nObject.defineProperty(exports, \"YYYYMMDD\", ({\r\n\tvalue: 8,\r\n\twritable: false\r\n}));\r\nObject.defineProperty(exports, \"MILLISECOND\", ({\r\n\tvalue: 16,\r\n\twritable: false\r\n}));\r\nObject.defineProperty(exports, \"ONE_DAY_MILLISECONDS\", ({\r\n\tvalue: ONE_DAY_MILLISECONDS,\r\n\twritable: false\r\n}));\r\nObject.defineProperty(exports, \"CHINESE_MONTH\", ({\r\n\tvalue: CHINESE_MONTH,\r\n\twritable: false\r\n}));\r\nObject.defineProperty(exports, \"ENGLISH_WEEK\", ({\r\n\tvalue: ENGLISH_WEEK,\r\n\twritable: false\r\n}));\r\nObject.defineProperty(exports, \"SHORT_ENGLISH_WEEK\", ({\r\n\tvalue: function () {\r\n\t\tvar ew = [];\r\n\t\tfor (let i = 0, len = ENGLISH_WEEK.length; i < len; i++) {\r\n\t\t\tew[i] = ENGLISH_WEEK[i].slice(0, 3);\r\n\t\t}\r\n\t\treturn ew;\r\n\t},\r\n\twritable: false\r\n}));\r\nObject.defineProperty(exports, \"LONG_CHINESE_WEEK\", ({\r\n\tvalue: LONG_CHINESE_WEEK,\r\n\twritable: false\r\n}));\r\nObject.defineProperty(exports, \"SHORT_CHINESE_WEEK\", ({\r\n\tvalue: SHORT_CHINESE_WEEK,\r\n\twritable: false\r\n}));\r\nObject.defineProperty(exports, \"ENGLISH_MONTH\", ({\r\n\tvalue: ENGLISH_MONTH,\r\n\twritable: false\r\n}));\r\nObject.defineProperty(exports, \"SHORT_ENGLISH_MONTH\", ({\r\n\tvalue: function () {\r\n\t\tvar em = [];\r\n\t\tfor (let i = 0, len = ENGLISH_MONTH.length; i < len; i++) {\r\n\t\t\tem[i] = ENGLISH_MONTH[i].slice(0, 3);\r\n\t\t}\r\n\t\treturn em;\r\n\t},\r\n\twritable: false\r\n}));\n\n//# sourceURL=webpack://hiton/./node_modules/coralian/src/lib/Calendar.js?");

/***/ }),

/***/ "./node_modules/coralian/src/lib/Formatter.js":
/*!****************************************************!*\
  !*** ./node_modules/coralian/src/lib/Formatter.js ***!
  \****************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("const { Char } = JsConst;\r\n\r\nfunction formatNumber(number) {\r\n\r\n\t// 目前只实现保留两位小数\r\n\tnumber = (number).toString().split(Char.POINT);\r\n\r\n\tvar after = number[1];\r\n\tif (after && after.length > 2) {\r\n\t\tlet last = parseInt(after[2]);\r\n\t\tafter = parseInt(after.slice(0, 2));\r\n\t\tif (last > 4) {\r\n\t\t\tafter += 1;\r\n\t\t}\r\n\t}\r\n\tnumber = number[0] + Char.POINT + (after || 0);\r\n\r\n\treturn number;\r\n}\r\n\r\nconst DEFAULT_FORMAT_TYPE = \"#.00\";\r\n\r\nmodule.exports = exports = {\r\n\tformatNumber: formatNumber,\r\n\tformatFileSize: function (size, type) {\r\n\t\tvar formated;\r\n\t\ttype = type || DEFAULT_FORMAT_TYPE;\r\n\t\tif (size < 1048576) {\r\n\t\t\tformated = formatNumber(size / 1024, type) + \" KB\";\r\n\t\t} else if (size < 1073741824) {\r\n\t\t\tformated = formatNumber(size / 1048576, type) + \" MB\";\r\n\t\t} else if (size < 1099511627776) {\r\n\t\t\tformated = formatNumber(size / 1073741824, type) + \" GB\";\r\n\t\t} else {\r\n\t\t\tformated = formatNumber(size / 1099511627776, type) + \" TB\";\r\n\t\t}\r\n\t\treturn formated;\r\n\t},\r\n\tformatString:  (__webpack_require__(/*! ./../common/base */ \"./node_modules/coralian/src/common/base.js\").formatString)\r\n};\r\n\n\n//# sourceURL=webpack://hiton/./node_modules/coralian/src/lib/Formatter.js?");

/***/ }),

/***/ "./node_modules/coralian/src/lib/Random.js":
/*!*************************************************!*\
  !*** ./node_modules/coralian/src/lib/Random.js ***!
  \*************************************************/
/***/ ((module, exports) => {

eval("const ALL_CASE = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\nconst UPPER_CASE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\nconst LOWER_CASE = \"abcdefghijklmnopqrstuvwxyz\";\r\nconst NUMBER = \"1234567890\";\r\nconst RAND_CODES = ALL_CASE + NUMBER;\r\n\r\nfunction getRand(type, length) {\r\n\r\n\tvar key = [],\r\n\t\ttimes = type.length;\r\n\tfor (let i = 0; i < length; i++) {\r\n\t\tkey[i] = type[parseInt(Math.random() * times)];\r\n\t}\r\n\r\n\treturn key.join(EMPTY_STRING);\r\n}\r\n\r\nmodule.exports = exports = {\r\n\tgetRandCode: function (length) {\r\n\t\treturn getRand(RAND_CODES, length);\r\n\t},\r\n\trandAllCase: function (length) {\r\n\t\treturn getRand(ALL_CASE, length);\r\n\t},\r\n\trandUpperCase: function (length) {\r\n\t\treturn getRand(UPPER_CASE, length);\r\n\t},\r\n\trandLowerCase: function (length) {\r\n\t\treturn getRand(LOWER_CASE, length);\r\n\t},\r\n\trandNumber: function (length) {\r\n\t\tlength = length || 16;\r\n\t\tif (length > 16) {\r\n\t\t\tthrow new Error(\"最多只能获取不超过 16 位的整数\");\r\n\t\t} else {\r\n\t\t\treturn parseInt(Math.random() * Math.pow(10, length));\r\n\t\t}\r\n\t},\r\n\trandNumberAndLetter: function (length) {\r\n\t\tvar key = [],\r\n\t\t\tcases, num;\r\n\t\tswitch (arguments[1]) {\r\n\t\t\tcase 0:\r\n\t\t\t\tcases = ALL_CASE + NUMBER;\r\n\t\t\t\tnum = 62;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\tcases = UPPER_CASE + NUMBER;\r\n\t\t\t\tnum = 36;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tcases = LOWER_CASE + NUMBER;\r\n\t\t\t\tnum = 36;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\tfor (let i = 0; i < length; i++) {\r\n\t\t\tkey[i] = cases[parseInt(Math.random() * num)];\r\n\t\t}\r\n\t\treturn key;\r\n\t},\r\n\tALL_CASE: 0,\r\n\tUPPER_CASE: 1,\r\n\tLOWER_CASE: 2\r\n};\n\n//# sourceURL=webpack://hiton/./node_modules/coralian/src/lib/Random.js?");

/***/ }),

/***/ "./node_modules/coralian/src/lib/ReplaceHolder.js":
/*!********************************************************!*\
  !*** ./node_modules/coralian/src/lib/ReplaceHolder.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("const replaceElement = (__webpack_require__(/*! ../common/base */ \"./node_modules/coralian/src/common/base.js\").replaceElement);\r\nconst { LOOP_REG_START, LOOP_REG_END, LOOP_IN_START, DEFAULT_SURFIX, LOOP_REG_START_L } = replaceElement;\r\nconst { Char, XmlEntity, CharCode, RegxType } = JsConst;\r\n\r\nconst HTML_NEW_LINE = \"<br />\";\r\n\r\nfunction replaceLoop(str, objs, callback) {\r\n\tvar result = [];\r\n\twhile (true) {\r\n\t\tlet index = str.indexOf(LOOP_REG_START);\r\n\t\tif (index > 0) {\r\n\t\t\tresult.push(str.slice(0, index));\r\n\t\t\tstr = str.slice(index);\r\n\t\t} else if (index < 0) {\r\n\t\t\tresult.push(str);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tlet firstEnd = str.indexOf(DEFAULT_SURFIX),\r\n\t\t\taction = str.slice(LOOP_REG_START_L, firstEnd);\r\n\t\tvar end = LOOP_REG_END + action + DEFAULT_SURFIX;\r\n\t\tlet inStr = str.slice(firstEnd + 1, str.indexOf(end));\r\n\t\tlet obj = objs,\r\n\t\t\ttmpAction = action.split(Char.POINT);\r\n\t\tfor (let i = 0, len = tmpAction.length; i < len; i++) {\r\n\t\t\tif (!obj) break;\r\n\t\t\tobj = obj[tmpAction[i]];\r\n\t\t}\r\n\r\n\t\tif (obj !== null && obj !== undefined) {\r\n\t\t\tlet isArr = Array.isArray(obj);\r\n\t\t\tlet keys = isArr ? obj : Object.keys(obj);\r\n\t\t\tfor (let i = 0, len = keys.length; i < len; i++) {\r\n\t\t\t\tlet o = obj[isArr ? i : keys[i]];\r\n\t\t\t\tlet loopStr = inStr; // 定义循环所使用的变量\r\n\t\t\t\tloopStr = loopStr.replace(new RegExp(`${LOOP_IN_START}id}`, RegxType.GLOBAL), i);\r\n\t\t\t\tloopStr = loopStr.replace(new RegExp(`${LOOP_IN_START}key}`,RegxType.GLOBAL), keys[i]);\r\n\t\t\t\tif (String.TYPE_NAME === typeof o) {\r\n\t\t\t\t\tresult.push(loopStr.replace(new RegExp(`${LOOP_IN_START}text}`, RegxType.GLOBAL), keys[i]));\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// 递归查找子循环\r\n\t\t\t\t\tloopStr = replaceLoop(loopStr, o);\r\n\t\t\t\t\t// 替换内部元素\r\n\t\t\t\t\tloopStr = replaceElement(loopStr, o, `${LOOP_IN_START}${action}${Char.POINT}`);\r\n\t\t\t\t\tloopStr = callback(loopStr, o, `${action}${Char.POINT}`);\r\n\t\t\t\t\tresult.push(loopStr);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tstr = str.slice(str.indexOf(end) + end.length);\r\n\t}\r\n\r\n\treturn result.join(String.BLANK);\r\n}\r\n\r\nmodule.exports = exports = {\r\n\treplaceElement: replaceElement,\r\n\treplaceLoop: replaceLoop,\r\n\t/*\r\n\t * html 替换器\r\n\t */\r\n\thtmlEscape: function (str, aspect) {\r\n\r\n\t\tstr = str.replace(/\\&/g,  XmlEntity.AMP);\r\n\r\n\t\tvar first, second, third, forth;\r\n\t\tif (aspect) {\r\n\t\t\tfirst = aspect.first;\r\n\t\t\tsecond = aspect.second;\r\n\t\t\tthird = aspect.third;\r\n\t\t\tforth = aspect.forth;\r\n\t\t}\r\n\r\n\t\tstr = (!!first) ? first(str) : str;\r\n\r\n\t\tstr = str.replace(/  /ig, `${Char.Space.BLANK}${XmlEntity.SPACE}`);\r\n\t\tstr = str.replace(/\\t/ig, `${XmlEntity.SPACE}${XmlEntity.SPACE}${XmlEntity.SPACE}${XmlEntity.SPACE}${CharCode.ZERO_WIDTH}`); // 制表符这么写主要是为了满足表现形式和制表符相同（不会换行）\r\n\r\n\t\tstr = (!!second) ? second(str) : str;\r\n\r\n\t\tstr = str.replace(/</ig, XmlEntity.LEFT_ANGLE);\r\n\t\tstr = str.replace(/>/ig, XmlEntity.RIGHT_ANGLE);\r\n\r\n\t\tstr = (!!third) ? third(str) : str;\r\n\r\n\t\tstr = str.replace(/(\\r\\n|\\n|\\r)/ig, HTML_NEW_LINE);\r\n\r\n\t\tstr = (!!forth) ? forth(str) : str;\r\n\r\n\t\treturn str;\r\n\t}\r\n};\n\n//# sourceURL=webpack://hiton/./node_modules/coralian/src/lib/ReplaceHolder.js?");

/***/ }),

/***/ "./node_modules/coralian/src/lib/Validator.js":
/*!****************************************************!*\
  !*** ./node_modules/coralian/src/lib/Validator.js ***!
  \****************************************************/
/***/ ((module, exports) => {

eval("const UPPER_CASE = /[A-Z]/,\r\n\tLOWER_CASE = /[a-z]/,\r\n\tNUMBER = /[0-9]/,\r\n\tMARKS = /[\\@#\\$\\%\\&\\*\\!\\^\\+\\=\\-_\\~:\\;\\,\\.\\?]/;\r\n\r\nfunction passwordCheckError(msg, id) {\r\n\tvar e = new Error(msg);\r\n\te.id = id || \"password\";\r\n\r\n\tthrow e;\r\n}\r\n\r\nfunction isValidPassword(password) {\r\n\r\n\tif (String.isEmpty(password)) {\r\n\t\tpasswordCheckError(\"密码不能为空\");\r\n\t}\r\n\r\n\t/*\r\n\t * 密码校验必须符合以下两项规则\r\n\t * 1. 长度必须 >= 6 位\r\n\t */\r\n\tif (password.length < 6) {\r\n\t\tpasswordCheckError(\"密码长度最少 6 位\");\r\n\t}\r\n\r\n\t/*\r\n\t * 2. 必须包含大小写字母、数字、特殊字符（@#$%&*!^+=-_~:;,.?，不再左列中，以及不是字母、数字的字符被视为非法字符）中的三项\r\n\t *  大写字母 小写字母 数字 特殊字符\r\n\t *  0000 X 0\r\n\t *  0001 X 1\r\n\t *  0010 X 2\r\n\t *  0011 X 3\r\n\t *  0100 X 4\r\n\t *  0101 X 5\r\n\t *  0110 X 6\r\n\t *  0111 O 7\r\n\t *  1000 X 8\r\n\t *  1001 X 9\r\n\t *  1010 X 10\r\n\t *  1011 O 11\r\n\t *  1100 X 12\r\n\t *  1101 O 13\r\n\t *  1110 O 14\r\n\t *  1111 O 15\r\n\t */\r\n\tvar point = 0;\r\n\tif (UPPER_CASE.test(password)) {\r\n\t\tpoint += 8;\r\n\t}\r\n\tif (LOWER_CASE.test(password)) {\r\n\t\tpoint += 4;\r\n\t}\r\n\tif (NUMBER.test(password)) {\r\n\t\tpoint += 2;\r\n\t}\r\n\tif (MARKS.test(password)) {\r\n\t\tpoint += 1;\r\n\t}\r\n\tif (point < 13 && point !== 7 && point !== 11) {\r\n\t\treturn passwordCheckError(\"密码至少要包含大写字母、小写字母、数字或特殊字符中的三项\");\r\n\t}\r\n}\r\n\r\nmodule.exports = exports = {\r\n\tisValidPassword: isValidPassword,\r\n\t// 校验身份证号\r\n\t// 来源：https://segmentfault.com/a/1190000010452673\r\n\tisValidIdNumber: function (id) {\r\n\r\n\t\t// 1 \"验证通过!\", 0 //校验不通过\r\n\t\tvar format = /^(([1][1-5])|([2][1-3])|([3][1-7])|([4][1-6])|([5][0-4])|([6][1-5])|([7][1])|([8][1-2]))\\d{4}(([1][9]\\d{2})|([2]\\d{3}))(([0][1-9])|([1][0-2]))(([0][1-9])|([1-2][0-9])|([3][0-1]))\\d{3}[0-9xX]$/;\r\n\t\t//号码规则校验\r\n\t\tif (!format.test(id)) return false;\r\n\r\n\t\t//区位码校验\r\n\t\t//出生年月日校验   前正则限制起始年份为1900;\r\n\t\tvar year = id.substr(6, 4),//身份证年\r\n\t\t\tmonth = id.substr(10, 2),//身份证月\r\n\t\t\tdate = id.substr(12, 2),//身份证日\r\n\t\t\ttime = Date.parse(`${month}${Char.HYPHEN}${date}${Char.HYPHEN}${year}`),//身份证日期时间戳date\r\n\t\t\tnowTime = Date.parse(new Date()),//当前时间戳\r\n\t\t\tdates = (new Date(year, month, 0)).getDate();//身份证当月天数\r\n\t\tif (time > nowTime || date > dates) return false;\r\n\r\n\t\t//校验码判断\r\n\t\tvar c = new Array(7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2);   //系数\r\n\t\tvar b = new Array(\"1\", \"0\", \"X\", \"9\", \"8\", \"7\", \"6\", \"5\", \"4\", \"3\", \"2\");  //校验码对照表\r\n\t\tvar id_array = id.split(String.BLANK);\r\n\t\tvar sum = 0;\r\n\t\tfor (var k = 0; k < 17; k++) {\r\n\t\t\tsum += parseInt(id_array[k]) * parseInt(c[k]);\r\n\t\t}\r\n\r\n\t\treturn id_array[17].toUpperCase() === b[sum % 11].toUpperCase();\r\n\t},\r\n\tisValidMPhone: function (mphone) {\r\n\t\treturn /^[1](([3][0-9])|([4][5-9])|([5][0-3,5-9])|([6][5,6])|([7][0-8])|([8][0-9])|([9][1,8,9]))[0-9]{8}$/.test(mphone);\r\n\t}\r\n};\n\n//# sourceURL=webpack://hiton/./node_modules/coralian/src/lib/Validator.js?");

/***/ }),

/***/ "./node_modules/coralian/src/lib/dom.js":
/*!**********************************************!*\
  !*** ./node_modules/coralian/src/lib/dom.js ***!
  \**********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("const { browserOnly, hasOwnProperty } = __webpack_require__(/*! ../common/base */ \"./node_modules/coralian/src/common/base.js\");\r\nconst { unsupportedType, indexOutOfBounds, errorCast } = Error;\r\nconst EMPTY_STRING = String.BLANK;\r\nconst { Char, HTML: { Tag } } = JsConst;\r\n// 标签\r\nconst START_START_TAG = Char.Angle.LEFT,\r\n\tSTART_END_TAG = `${Char.Angle.LEFT}${Char.SLASH}`,\r\n\tEND_TAG = Char.Angle.RIGHT,\r\n\tENMPTY_END_TAG = ` ${Char.SLASH}${Char.Angle.RIGHT}`;\r\n\r\n// 包括 img 在内没有回标签的标签集合\r\nconst NO_BODY_TAG = [Tag.IMG, Tag.INPUT, Tag.BR, Tag.HR, Tag.TITLE];\r\n// 不能再在标签内部添加同名标签\r\nconst NOT_SAME_TAG = [\r\n\t// HTML 体标签\r\n\tTag.HTML, Tag.HEAD, Tag.TITLE, Tag.BODY,\r\n\t// 其他标签\r\n\t, Tag.A, Tag.I, Tag.B, Tag.DEL, Tag.U, Tag.STRIKE\r\n];\r\nconst ABEND_TAG = [Tag.SCRIPT];\r\nconst KEY_NAME = new Map();\r\nKEY_NAME.set(\"class\", \"className\");\r\n\r\nfunction getKeyName(key) {\r\n\treturn KEY_NAME.has(key) ? KEY_NAME.get(key) : key;\r\n}\r\n\r\nfunction XmlWrapper(tag, attribute, xmlType) {\r\n\r\n\tlet _hashcode = \"$=!\" + (2388 / Math.random() + Math.sin(Date.now()));\r\n\r\n\tif (!tag || !typeIs(tag, String.TYPE_NAME)) throw new Error(\"只有非空文本能作为标签\");\r\n\tif (Array.has(ABEND_TAG, tag)) throw new Error(\"不允许使用 XmlWrapper 来动态构建 \" + tag + \" 元素\");\r\n\r\n\tlet attrs;\r\n\tif (attribute instanceof Map) {\r\n\t\tattrs = attribute;\r\n\t} else {\r\n\t\tattrs = new Map();\r\n\t\tif (attribute) {\r\n\t\t\tObject.forEach(attribute, function (key, value) {\r\n\t\t\t\tattrs.set(key, value);\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\tvar tIndex = 0,\r\n\t\tnIndex = 0, // 这两个数字不对外公开使用\r\n\t\tchildren = [],\r\n\t\tparent = null;\r\n\r\n\tthis.add = function (element, parse) {\r\n\r\n\t\tif (!tag) {\r\n\t\t\tchildren.push({\r\n\t\t\t\tindex: tIndex++,\r\n\t\t\t\ttype: String,\r\n\t\t\t\tparse: (parse === undefined) ? true : parse\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tif (Array.has(NO_BODY_TAG, tag)) throw new Error(\"不能向当前标签（\" + tag + \"）内无法添加元素\");\r\n\r\n\t\tif (element instanceof XmlWrapper) {\r\n\t\t\tif (Array.has(NOT_SAME_TAG, tag) && tag === element.getTag()) throw new Error(\"当前 XML 节点的标签（\" + tag + \"）中不被允许储存同名子节点\");\r\n\r\n\t\t\tchildren.push({\r\n\t\t\t\tindex: nIndex++,\r\n\t\t\t\ttype: XmlWrapper,\r\n\t\t\t\telement: element\r\n\t\t\t});\r\n\t\t\telement.setParent(this);\r\n\t\t} else if (typeIs(element, String.TYPE_NAME)) {\r\n\r\n\t\t\tchildren.push({\r\n\t\t\t\tindex: tIndex++,\r\n\t\t\t\ttype: String,\r\n\t\t\t\telement: element,\r\n\t\t\t\tparse: (parse === undefined) ? true : parse\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tunsupportedType(element);\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t};\r\n\r\n\tthis.clear = function () {\r\n\r\n\t\tthis.clearChildren();\r\n\t\tattrs.clear();\r\n\t\tparent = null;\r\n\t};\r\n\r\n\tthis.clearChildren = function () {\r\n\t\tnIndex = 0;\r\n\t\ttIndex = 0;\r\n\t\tchildren = [];\r\n\t};\r\n\r\n\tthis.nodeCount = function (tagName) {\r\n\t\tif (!tagName) return nIndex;\r\n\r\n\t\tvar count = 0;\r\n\t\tObject.forEach(children, function (i, element) {\r\n\t\t\tif (element.type === XmlWrapper &&\r\n\t\t\t\telement.element.getTag() === tagName) {\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn count;\r\n\t};\r\n\r\n\tthis.isEmpty = function () {\r\n\t\treturn Object.isEmpty(children);\r\n\t};\r\n\r\n\t/*\r\n\t * xml = true html = false\r\n\t */\r\n\tthis.setXmlType = function (type) {\r\n\t\txmlType = type;\r\n\t};\r\n\tthis.setParent = function (p) {\r\n\t\tparent = p;\r\n\t};\r\n\tthis.getParent = function () {\r\n\t\treturn parent;\r\n\t};\r\n\r\n\tthis.isRoot = function () {\r\n\t\treturn parent == null;\r\n\t};\r\n\r\n\tthis.getElement = function (index) {\r\n\t\treturn children[index];\r\n\t};\r\n\r\n\tthis.getText = function (index) {\r\n\t\tif (isNumber(index)) {\r\n\t\t\tif (index < tIndex) {\r\n\t\t\t\tfor (let i = 0, len = children.length; i < len; i++) {\r\n\t\t\t\t\tlet element = children[i];\r\n\t\t\t\t\tif (String === element.type && element.index === index) {\r\n\t\t\t\t\t\treturn element.element;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tindexOutOfBounds(tIndex, index);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\terrorCast(index, Number);\r\n\t\t}\r\n\t};\r\n\r\n\tthis.getTexts = function () {\r\n\t\tvar results = [];\r\n\t\tfor (let i = 0, len = children.length; i < len; i++) {\r\n\t\t\tlet element = children[i];\r\n\t\t\tif (String === element.type) {\r\n\t\t\t\tresults.push(element.element);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn results;\r\n\t};\r\n\r\n\tthis.hashCode = function () {\r\n\t\treturn _hashcode;\r\n\t};\r\n\r\n\tthis.getNode = function (index, tagName) {\r\n\t\tif (tagName) {\r\n\t\t\tif (index < nIndex) {\r\n\t\t\t\tfor (let i = 0, len = children.length; i < len; i++) {\r\n\t\t\t\t\tlet element = children[i];\r\n\t\t\t\t\tlet node = element.element;\r\n\t\t\t\t\tif (element.type === XmlWrapper && index === element.index && node.getTag() === tagName) {\r\n\t\t\t\t\t\treturn node;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tindexOutOfBounds(nIndex, index);\r\n\t\t\t}\r\n\t\t} else if (Number.isNumber(index)) {\r\n\t\t\tif (index < nIndex) {\r\n\t\t\t\tfor (let i = 0, len = children.length; i < len; i++) {\r\n\t\t\t\t\tlet element = children[i];\r\n\t\t\t\t\tif (element.type === XmlWrapper && index === element.index) {\r\n\t\t\t\t\t\treturn element.element;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tindexOutOfBounds(nIndex, index);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\terrorCast(index, Number);\r\n\t\t}\r\n\t\treturn null;\r\n\t};\r\n\r\n\tthis.lastNode = function (tagName) {\r\n\t\tif (tagName) {\r\n\t\t\tif (typeIs(tagName, String.TYPE_NAME)) {\r\n\t\t\t\tfor (let i = children.length - 1; i >= 0; i--) {\r\n\t\t\t\t\tlet element = children[i];\r\n\t\t\t\t\tlet node = element.element;\r\n\t\t\t\t\tif (element.type === XmlWrapper && node.getTag() === tagName) {\r\n\t\t\t\t\t\treturn node;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\terrorCast(tagName, String);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tfor (let i = children.length - 1; i >= 0; i--) {\r\n\t\t\t\tlet element = children[i];\r\n\t\t\t\tif (element.type === XmlWrapper) {\r\n\t\t\t\t\treturn element.element;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t};\r\n\tthis.getNodes = function (tagName) {\r\n\r\n\t\tlet results = [];\r\n\r\n\t\tif (tagName) {\r\n\t\t\tif (typeIs(tagName, String.TYPE_NAME)) {\r\n\t\t\t\tfor (let i = 0, len = children.length; i < len; i++) {\r\n\t\t\t\t\tlet element = children[i];\r\n\t\t\t\t\tlet node = element.element;\r\n\t\t\t\t\tif (element.type === XmlWrapper && node.getTag() === tagName) {\r\n\t\t\t\t\t\tresults.push(node);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\terrorCast(tagName, String);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tfor (let i = 0, len = children.length; i < len; i++) {\r\n\t\t\t\tlet element = children[i];\r\n\t\t\t\tif (element.type === XmlWrapper) {\r\n\t\t\t\t\tresults.push(element.element);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn results;\r\n\t};\r\n\r\n\tthis.size = function () {\r\n\t\treturn children.length;\r\n\t};\r\n\r\n\tthis.update = function (index, element) {\r\n\r\n\t\tif (!Number.isNumber(index)) errorCast(index, Number);\r\n\r\n\t\tvar type = typeof element;\r\n\t\tif ((String.TYPE_NAME !== type) && !(element instanceof XmlWrapper)) unsupportedType(element);\r\n\r\n\t\tvar len = children.length;\r\n\t\tif (index >= len) indexOutOfBounds(index, len);\r\n\r\n\t\tvar old = children[index];\r\n\r\n\t\tif (type === typeof old.element) {\r\n\t\t\told.element = element;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\told.element = element;\r\n\r\n\t\tvar isFirst = true;\r\n\t\tfor (index += 1; index < len; index++) {\r\n\t\t\tlet tmp = children[index];\r\n\t\t\tif (type === typeof tmp.element) {\r\n\t\t\t\tif (isFirst) {\r\n\t\t\t\t\told.index = tmp.index;\r\n\t\t\t\t\tisFirst = false;\r\n\t\t\t\t}\r\n\t\t\t\ttmp.index++;\r\n\t\t\t} else {\r\n\t\t\t\ttmp.index--;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (String.TYPE_NAME === type) {\r\n\t\t\tnIndex++;\r\n\t\t\ttIndex--;\r\n\t\t} else {\r\n\t\t\ttIndex++;\r\n\t\t\tnIndex--;\r\n\t\t}\r\n\t};\r\n\r\n\tthis.compare = function (another) {\r\n\t\tif (this === another) return true;\r\n\t\tif (!(another instanceof Map)) return false;\r\n\t\tif (tag !== another.getTag()) return false;\r\n\r\n\t\tfor (let [key, val] of attrs.entries()) {\r\n\t\t\tvar aVal = another.get(key);\r\n\t\t\tif (typeof val !== typeof aVal) return false;\r\n\t\t\tif (val !== aVal && // 字符串形式的文本节点或引用同一片内存空间\r\n\t\t\t\t!val.compare(aVal)) // 元素节点\r\n\t\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tthis.on = function (name, func) {\r\n\t\tbrowserOnly();\r\n\t}\r\n\r\n\t/*\r\n\t * 将保存的对象渲染为一个dom结构\r\n\t * 不同于 toString 转变为字符串，这个输出的 dom 结构是可以修改的，并且可以直接插入到 HTML 之中\r\n\t */\r\n\tthis.render = function () {\r\n\r\n\t\tbrowserOnly();\r\n\r\n\t\tlet element = document.createElement(tag);\r\n\r\n\t\tattrs.forEach(function (val, key) {\r\n\t\t\telement[getKeyName(key)] = val;\r\n\t\t});\r\n\r\n\t\tObject.forEach(children, function (i, node) {\r\n\t\t\tswitch (node.type) {\r\n\t\t\t\tcase String:\r\n\t\t\t\t\tif (node.parse) {\r\n\t\t\t\t\t\telement.appendChild(document.createTextNode(node.element));\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\telement.innerHTML = node.element;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase XmlWrapper:\r\n\t\t\t\t\telement.appendChild(node.element.render());\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tunsupportedType(node.type);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn element;\r\n\t}\r\n\r\n\tthis.remove = function (index, count, type, tag) {\r\n\r\n\t\tvar len = children.length;\r\n\t\tif (index < 0 || index >= len) indexOutOfBounds(index, 0);\r\n\r\n\t\tvar last = index + count;\r\n\t\tif (len <= last) indexOutOfBounds(last, len);\r\n\r\n\t\tvar removed = [];\r\n\t\tvar tRevmoed = 0;\r\n\r\n\t\tfor (let i = index; i < last; i++) {\r\n\r\n\t\t\tlet element = children[i];\r\n\t\t\tswitch (element.type) {\r\n\t\t\t\tcase String:\r\n\t\t\t\t\tif (type === String.TYPE_NAME) {\r\n\t\t\t\t\t\ttRemoved++;\r\n\t\t\t\t\t\tremoved.push(element.element);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase XmlWrapper:\r\n\t\t\t\t\tif (type === \"node\") {\r\n\t\t\t\t\t\tif (!!tag && element.element.getTag() === tag) {\r\n\t\t\t\t\t\t\tremoved.push(element.element);\r\n\t\t\t\t\t\t\tnRemoved++;\r\n\t\t\t\t\t\t} else if (!tag) {\r\n\t\t\t\t\t\t\tremoved.push(element.element);\r\n\t\t\t\t\t\t\tnRemoved++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tunsupportedType(element.type);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\ttIndex -= tRevmoed;\r\n\t\tnIndex -= nRevmoed;\r\n\r\n\t\tfor (let i = last; i < len; i++) {\r\n\t\t\tlet element = children[i];\r\n\t\t\tswitch (element.type) {\r\n\t\t\t\tcase String:\r\n\t\t\t\t\telement.index -= tRevmoed;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase XmlWrapper:\r\n\t\t\t\t\telement.index -= nRevmoed;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tunsupportedType(element.type);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn removed;\r\n\t};\r\n\tthis.putAttribute = function (key, val) {\r\n\t\tattrs.set(key, val);\r\n\t};\r\n\tthis.putAllAttributes = function (obj) {\r\n\t\tObject.forEach(obj, function (key, val) {\r\n\t\t\tattrs.set(key, val);\r\n\t\t})\r\n\t};\r\n\tthis.removeAttribute = function (key) {\r\n\t\treturn attrs[\"delete\"](key);\r\n\t};\r\n\tthis.getAttribute = function (key) {\r\n\t\treturn attrs.get(key);\r\n\t};\r\n\tthis.containsAttribute = function (key) {\r\n\t\treturn attrs.has(key);\r\n\t};\r\n\r\n\tthis.getTag = function () {\r\n\t\treturn tag;\r\n\t};\r\n\tthis.toString = this.toHTML = function () {\r\n\r\n\t\tvar xml = [START_START_TAG, tag];\r\n\t\tattrs.forEach(function (val, key) {\r\n\t\t\txml.push(Char.Space.SPACE + key + `${Char.EQUALS}${Char.DQUOTE}` + attrs.get(key) + Char.DQUOTE);\r\n\t\t});\r\n\r\n\t\tvar len = children.length;\r\n\t\tif (len === 0) {\r\n\t\t\tif (xmlType) {\r\n\t\t\t\txml.push(ENMPTY_END_TAG);\r\n\t\t\t} else {\r\n\t\t\t\tif (Array.has(NO_BODY_TAG, tag)) {\r\n\t\t\t\t\txml.push(ENMPTY_END_TAG);\r\n\t\t\t\t} else {\r\n\t\t\t\t\txml.push(END_TAG + START_END_TAG + tag + END_TAG);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\txml.push(END_TAG);\r\n\t\t\tfor (var i = 0; i < len; i++) {\r\n\t\t\t\txml.push(children[i].element.toString());\r\n\t\t\t}\r\n\t\t\txml.push(START_END_TAG + tag + END_TAG);\r\n\t\t}\r\n\t\treturn xml.join(EMPTY_STRING);\r\n\t};\r\n}\r\n\r\n/**\r\n * 通过制定格式的 JSON 对象创建一个 HTML 格式的 JSON：\r\n * [{ tag : 'div', attribute : {\r\n * 'class' : 'class_name' }, child : [ 'text', { tag : 'div', child : [\r\n * 'div_text', { tag : 'input', attribute : { type : 'text' } } ] } ] }, {\r\n * tag : 'p', attribute : { id : 'idname' }, child : [ { tag :\r\n * 'span', child : [ 'spantext' ] } ] } ]\r\n * \r\n * 说明： tag : 制定要创建的 HTML 节点的 tag attribute : HTML 节点的属性 child\r\n * ：HTML节点的子元素（文本与子节点均通过 child 来表示）\r\n */\r\nfunction jsonToHTML(json) {\r\n\tif (!Array.isArray(json)) {\r\n\t\tunsupportedType(json);\r\n\t}\r\n\tvar result = [];\r\n\tfor (let i = 0, len = json.length; i < len; i++) {\r\n\t\tlet obj = json[i];\r\n\t\tif (!typeIs(obj, Object.TYPE_NAME)) {\r\n\t\t\tresult.push((obj).toString());\r\n\t\t} else {\r\n\t\t\tlet xml = new XmlWrapper(obj.tag, obj.attribute);\r\n\t\t\tlet child = obj.child;\r\n\t\t\tif (child) {\r\n\t\t\t\tif (typeIs(child, String.TYPE_NAME)) {\r\n\t\t\t\t\txml.add(child);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar children = jsonToHTML(child);\r\n\t\t\t\t\tfor (let j = 0, cLen = children.length; j < cLen; j++) {\r\n\t\t\t\t\t\txml.add(children[j]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tresult.push(xml);\r\n\t\t}\r\n\t}\r\n\treturn result.join(String.BLANK);\r\n}\r\n\r\n// String -> XmlWrapper\r\nfunction parse(input) {\r\n\r\n}\r\n\r\n/**\r\n * 将任意格式的 JSON 对象转换为一个 XML 字符串（不是 HTML）\r\n */\r\nfunction jsonToXml(json, rootTag) {\r\n\r\n\tif (!typeIs(json, Object.TYPE_NAME, Array.TYPE_NAME, String.TYPE_NAME, Number.TYPE_NAME)) unsupportedType(json);\r\n\r\n\tvar root = new XmlWrapper(rootTag || \"root\");\r\n\troot.setXmlType(true);\r\n\tif (typeOf(json, String.TYPE_NAME)) {\r\n\t\troot.add(json);\r\n\t} else {\r\n\t\tfor (let name in json) {\r\n\t\t\tif (hasOwnProperty(json, item)) {\r\n\t\t\t\tlet item = json[name];\r\n\t\t\t\troot.add(jsonToXml(item, name));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn root;\r\n}\r\n\r\nmodule.exports = exports = {\r\n\tnewXmlWrapper: function (t, a, x) {\r\n\t\treturn new XmlWrapper(t, a, x);\r\n\t},\r\n\tisXmlWrapper: function (obj) {\r\n\t\treturn obj instanceof XmlWrapper;\r\n\t},\r\n\tjsonToHTML: jsonToHTML,\r\n\tjsonToXml: jsonToXml,\r\n\t/*\r\n\t * 目前尚未实现该功能\r\n\t */\r\n\t// parse : parse,\r\n\t// xmlToJSON : xmlToJSON\r\n\tXML: false,\r\n\tHTML: true\r\n};\n\n//# sourceURL=webpack://hiton/./node_modules/coralian/src/lib/dom.js?");

/***/ }),

/***/ "./node_modules/coralian/src/lib/logger.js":
/*!*************************************************!*\
  !*** ./node_modules/coralian/src/lib/logger.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/*\r\n * Coralian.logger 只实现最基本的日志记录功能，\r\n * 以及对日志进行最基本的格式化功能\r\n */\r\nconst Calendar = __webpack_require__(/*! ./Calendar */ \"./node_modules/coralian/src/lib/Calendar.js\");\r\nconst formatString = (__webpack_require__(/*! ./../common/base */ \"./node_modules/coralian/src/common/base.js\").formatString);\r\n\r\nconst INFO = 'INFO',\r\n\tERROR = 'ERROR',\r\n\tWARN = 'WARN';\r\n\r\nconst STRING_FORMAT = \"[${date}] ${level} ${message}\";\r\nconst TIME_FORMAT = \"YYYY-MM-DD hh:mm:ss.ms\";\r\n\r\nfunction format(level, message) {\r\n\treturn formatString(STRING_FORMAT, {\r\n\t\tdate: Calendar.formatTime(new Date(), TIME_FORMAT),\r\n\t\tlevel: level,\r\n\t\tmessage: message\r\n\t});\r\n}\r\n\r\nexports.log = exports.ingo = (str) => {\r\n\tconsole.log(format(INFO, str));\r\n};\r\nexports.err = (err) => {\r\n\terr = err || {};\r\n\tconsole.error(err.message || \"错误信息\")\r\n\tconsole.error(format(ERROR, err.stack));\r\n};\r\nexports.warn = (str) => {\r\n\tconsole.warn(format(WARN, str));\r\n};\n\n//# sourceURL=webpack://hiton/./node_modules/coralian/src/lib/logger.js?");

/***/ }),

/***/ "./node_modules/coralian/src/lib/util.js":
/*!***********************************************!*\
  !*** ./node_modules/coralian/src/lib/util.js ***!
  \***********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("const { hasOwnProperty, Interface, Iterator, objectClone, getType, Null, Undefined } = __webpack_require__(/*! ../common/base */ \"./node_modules/coralian/src/common/base.js\");\r\nconst { unsupportedOperation, unsupportedType, errorCast, illegalArguments } = Error;\r\nconst { Char } = JsConst;\r\n\r\nconst StringUtil = {\r\n\tnormal: function (input) {\r\n\t\treturn input.replace(/<(\\/)?(b|i|strike|em|u|strong|sub|sup)>/ig, EMPTY_STRING);\r\n\t},\r\n\tweight: function (tag) {\r\n\t\treturn \"<\" + tag + \">\" + input + \"</\" + tag + \">\";\r\n\t},\r\n\tundersourceToCamel: (str, type = false) => {\r\n\t\tif (String.contains(str, Char.UNDER_SOURCE)) {\r\n\t\t\tlet result = [];\r\n\t\t\tlet arr = str.split(Char.UNDER_SOURCE);\r\n\t\t\tlet start = type ? 1 : 0; // 驼峰是大驼峰还是小驼峰\r\n\t\t\tfor (let i = start, len = arr.length; i < len; i++) {\r\n\t\t\t\tresult.push(StringUtil.firstToUpperCase(arr[i].toLowerCase()));\r\n\t\t\t}\r\n\t\t\treturn result.join(String.BLANK);\r\n\t\t} else {\r\n\t\t\treturn str;\r\n\t\t}\r\n\t},\r\n\tqueryString: function (obj) {\r\n\r\n\t\tif (typeIs(obj, String.TYPE_NAME)) {\r\n\t\t\treturn encodeURI(obj);\r\n\t\t}\r\n\r\n\t\tvar string = [];\r\n\t\tfor (var key in obj) {\r\n\t\t\tif (hasOwnProperty(obj, key)) {\r\n\t\t\t\t// 这里 encodeURIComponent 是因为 nodejs 端才这么写，其他服务器语言可能用不着\r\n\t\t\t\t// JSON.stringify 这句是因为可能存在包含对象类型的数据\r\n\t\t\t\tif (typeIs(obj[key], Object.TYPE_NAME)) {\r\n\t\t\t\t\tstring.push(key + Char.EQUALS + JSON.stringify(encodeURIComponent(obj[key])));\r\n\t\t\t\t} else {\r\n\t\t\t\t\tstring.push(key + Char.EQUALS + encodeURIComponent(obj[key]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn string.join(Char.AND);\r\n\t},\r\n\tfirstToUpperCase: function (str) {\r\n\t\tif (!typeIs(str, String.TYPE_NAME)) errorCast(str, String);\r\n\t\treturn str.charAt(0).toUpperCase() + str.slice(1);\r\n\t},\r\n\tfirstToLowserCase: function (str) {\r\n\t\tif (!typeIs(str, String.TYPE_NAME)) errorCast(str, String);\r\n\t\treturn str.charAt(0).toLowerCase() + str.slice(1);\r\n\t}\r\n};\r\n\r\nconst MathUtil = {\r\n\t/*\r\n\t * 代码来自：https://tool.lu/hexconvert/\r\n\t * 有修改。\r\n\t *\r\n\t * 进制转换函数。\r\n\t * 有三个参数：\r\n\t *   第一个参数支持的数据类型包括字符串和数字，\r\n\t *     当第一个参数的数据类型为数字（typeof === Number.TYPE_NAME），\r\n\t *       且没有提供第三个参数，则第二个参数的值作为输出参数处理。\r\n\t *   第二个参数是输入进制基数，\r\n\t *      如果不提供该参数，则判断输入的数字为10进制；\r\n\t *      如果输入的字符串中含有该进制不认可的字符，则返回NaN；\r\n\t *      如果hexConvert 不支持该进制，则抛出错误。\r\n\t *   第三个参数是输出进制基数，\r\n\t *      当第一个参数的数据类型为数字（typeof === Number.TYPE_NAME），该参数无效，\r\n\t *        以第二个参数作为输出进制基数进行处理\r\n\t *      如果不提供该参数，则判断输入的数字为10进制；\r\n\t *      如果hexConvert 不支持该进制，则抛出错误。\r\n\t */\r\n\thexConvert: (function () {\r\n\t\tconst BIN = 2,\r\n\t\t\tSIX = 6,\r\n\t\t\tOCT = 8,\r\n\t\t\tDEC = 10,\r\n\t\t\tHEX = 16,\r\n\t\t\tTWENTY_SIX = 26,\r\n\t\t\tSIXTY_TWO = 62\r\n\t\tSIXTY_FOUR = 64;\r\n\r\n\t\tconst BIN_START = \"0b\",\r\n\t\t\tOCT_START = \"0o\",\r\n\t\t\tHEX_START = \"0x\"\r\n\r\n\t\tconst NaN_STR = Number.NaN_TYPE_NAME;\r\n\t\tconst HEX_CHARS = {};\r\n\t\tHEX_CHARS[DEC] = \"0123456789\";\r\n\t\tHEX_CHARS[HEX] = HEX_CHARS[DEC] + \"ABCDEF\";\r\n\t\tHEX_CHARS[TWENTY_SIX] = \"abcdefghijklmnopqrstuvwxyz\";\r\n\t\tHEX_CHARS[SIXTY_FOUR] = (HEX_CHARS[DEC] + HEX_CHARS[TWENTY_SIX] + HEX_CHARS[TWENTY_SIX].toUpperCase()).replace(/[Oo01lI]/g, String.BLANK) + \"!@$&#%\";\r\n\t\tHEX_CHARS[SIXTY_TWO] = HEX_CHARS[SIXTY_FOUR].slice(2);\r\n\r\n\t\t// Returns a string representation of the given number for the given alphabet:\r\n\t\tfunction toAlphabet(num, alphabet) {\r\n\t\t\tvar base = alphabet.length;\r\n\t\t\tvar digits = [];\t// these will be in reverse order since arrays are stacks\r\n\r\n\t\t\t// execute at least once, even if num is 0, since we should return the \"0\":\r\n\t\t\tdo {\r\n\t\t\t\tdigits.push(num % base);\t// TODO handle negatives properly?\r\n\t\t\t\tnum = Math.floor(num / base);\r\n\t\t\t} while (num > 0);\r\n\r\n\t\t\tvar chars = [];\r\n\t\t\twhile (digits.length) {\r\n\t\t\t\tchars.push(alphabet[digits.pop()]);\r\n\t\t\t}\r\n\t\t\treturn chars.join(String.BLANK);\r\n\t\t};\r\n\r\n\t\t// Returns an integer representation of the given string for the given alphabet:\r\n\t\tfunction fromAlphabet(str, alphabet) {\r\n\t\t\tvar base = alphabet.length;\r\n\t\t\tvar pos = 0;\r\n\t\t\tvar num = 0;\r\n\r\n\t\t\tfor (let chr of str) {\r\n\t\t\t\tlet at = alphabet.indexOf(chr);\r\n\t\t\t\tif (at === -1) return NaN; // 因为返回的类型都是数字，所以这里直接返回 NaN\r\n\t\t\t\tnum += Math.pow(base, pos) * at;\r\n\t\t\t\tpos++;\r\n\t\t\t}\r\n\r\n\t\t\treturn num;\r\n\t\t};\r\n\r\n\t\tfunction fromBase(str, base) {\r\n\r\n\t\t\tswitch (base) {\r\n\t\t\t\tcase BIN:\r\n\t\t\t\t\tstr = BIN_START + str;\r\n\t\t\t\t\treturn Number(str);\r\n\t\t\t\tcase OCT:\r\n\t\t\t\t\tstr = OCT_START + str;\r\n\t\t\t\t\treturn Number(str);\r\n\t\t\t\tcase DEC:\r\n\t\t\t\t\treturn Number(str);\r\n\t\t\t\tcase HEX:\r\n\t\t\t\t\tstr = HEX_START + str;\r\n\t\t\t\t\treturn Number(str);\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn fromAlphabet(str, HEX_CHARS[base]);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tfunction hexConvert(num, inBase = DEC, outBase = DEC) {\r\n\r\n\t\t\tinBase = Number(inBase);\r\n\t\t\toutBase = Number(outBase);\r\n\r\n\t\t\tif (inBase > HEX && !(inBase in HEX_CHARS)) illegalArguments(\"不支持的输入进制基数：\" + inBase);\r\n\t\t\tif (outBase > HEX && !(outBase in HEX_CHARS)) illegalArguments(\"不支持的输出进制基数：\" + outBase);\r\n\r\n\t\t\tlet type = typeOf(num);\r\n\t\t\tswitch (type) {\r\n\t\t\t\tcase String.TYPE_NAME:\r\n\t\t\t\t\tnum = fromBase(num, inBase);\r\n\t\t\t\t\tif (Object.is(num, NaN)) return NaN_STR;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase Number.TYPE_NAME:\r\n\t\t\t\t\toutBase = inBase;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tillegalArguments(\"不被支持的参数类型：\" + type);\r\n\t\t\t}\r\n\r\n\t\t\tlet hexChars = (outBase < DEC) ? HEX_CHARS[DEC].slice(0, outBase) : HEX_CHARS[outBase];\r\n\t\t\treturn toAlphabet(num, hexChars);\r\n\t\t}\r\n\r\n\t\thexConvert.BIN = BIN;\r\n\t\thexConvert.OCT = OCT;\r\n\t\thexConvert.DEC = DEC;\r\n\t\thexConvert.HEX = HEX;\r\n\t\thexConvert.TWENTY_SIX = TWENTY_SIX;\r\n\t\thexConvert.SIXTY_TWO = SIXTY_TWO;\r\n\t\thexConvert.SIXTY_FOUR = SIXTY_FOUR;\r\n\t\treturn hexConvert;\r\n\t})(),\r\n\tPrimeNumber: (function () {\r\n\r\n\t\tconst PRIME_IN_50 = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]; // 预置50以内的所有质数\r\n\r\n\t\tfunction getPrimeInInputStartsWithFrom(primes, from) {\r\n\r\n\t\t\tlet output = [];\r\n\r\n\t\t\tfor (let i = primes.length - 1; i >= 0; i--) {\r\n\t\t\t\tif (primes[i] < from) break;\r\n\t\t\t\toutput.unshift(primes[i]);\r\n\t\t\t}\r\n\r\n\t\t\tif (from < 2) {\r\n\t\t\t\toutput.unshift(2);\r\n\t\t\t}\r\n\r\n\t\t\treturn output;\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tcalcByInput: (from, to) => {\r\n\r\n\t\t\t\t// 错误检查\r\n\t\t\t\tif (!Number.isNumber(from)) errorCast(from, Number);\r\n\t\t\t\tif (!Number.isNumber(to)) errorCast(to, Number);\r\n\t\t\t\tif (from > to) unsupportedOperation(\"开始数必须大于结束数\");\r\n\t\t\t\tif (to < 0 || from < 0) unsupportedOperation(\"开始数必须大于 0\");\r\n\r\n\t\t\t\tlet primes = PRIME_IN_50.slice();\r\n\t\t\t\tlet output = getPrimeInInputStartsWithFrom(primes, from);\r\n\r\n\t\t\t\tIS_PRIME: for (let i = 53; i < to; i += 2) {\r\n\r\n\t\t\t\t\tfor (let j = 0; j < primes.length; j++) {\r\n\t\t\t\t\t\tif (i % primes[j] === 0) continue IS_PRIME;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tprimes.push(i);\r\n\t\t\t\t\tif (i >= from) {\r\n\t\t\t\t\t\toutput.push(i);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn output;\r\n\t\t\t},\r\n\t\t\tis: (input) => {\r\n\r\n\t\t\t\tif (!typeIs(input, Number.TYPE_NAME)) errorCast(input, Number);\r\n\r\n\t\t\t\tlet inputRoot = Math.sqrt(input);\r\n\r\n\t\t\t\tfor (let i = 0; i < PRIME_IN_50.length; i++) {\r\n\t\t\t\t\tlet now = PRIME_IN_50[i];\r\n\t\t\t\t\tif (now > inputRoot) return true;\r\n\t\t\t\t\tif (input % now === 0) return false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (let i = 51; i < inputRoot; i += 2) {\r\n\t\t\t\t\tif (input % i === 0) return false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t};\r\n\t})()\r\n};\r\n\r\nconst ObjectUtil = {\r\n\t/**\r\n\t * 迭代器\r\n\t */\r\n\titerator: (obj) => {\r\n\t\treturn new Iterator(obj);\r\n\t},\r\n\thasOwnProperty: hasOwnProperty,\r\n\toverride: function (obj, name, callback) {\r\n\r\n\t\tvar proto = obj[name];\r\n\r\n\t\tobj[name] = callback(function () {\r\n\t\t\treturn proto.apply(obj, arguments);\r\n\t\t});\r\n\t},\r\n\targumentsToArray: function () {\r\n\t\treturn Array.of(arguments);\r\n\t},\r\n\tclone: objectClone,\r\n\t/*\r\n\t * 通过 Type 类来获得相关 type 的信息\r\n\t */\r\n\tgetType: getType\r\n};\r\n\r\nconst CharUtil = (function () {\r\n\r\n\tfunction invaildCharacter(input) {\r\n\t\tthrow new Error(input + \" 不是合法的字符\");\r\n\t}\r\n\r\n\tconst ZERO = 0x0030,\r\n\t\tNINE = 0x0039,\r\n\t\tUPPER_A = 0x0041,\r\n\t\tUPPER_Z = 0x005A,\r\n\t\tLOWER_A = 0x0061,\r\n\t\tLOWER_Z = 0x007A;\r\n\r\n\t// TODO 这个函数有点问题，先暂时不用\r\n\t// function __isNumber(number) {\r\n\t// \tif (!isChar(number)) invaildCharacter(number);\r\n\t// \tvar code = number.charCodeAt(0);\r\n\t// \treturn code >= ZERO && code <= NINE;\r\n\t// }\r\n\r\n\tfunction isAlphabet(input) {\r\n\t\tif (!isChar(input)) invaildCharacter(input);\r\n\t\tvar code = letter.charCodeAt(0);\r\n\t\treturn (code >= UPPER_A && code <= UPPER_Z) || (code >= LOWER_A && code <= LOWER_Z);\r\n\t}\r\n\r\n\tfunction isChar(str) {\r\n\t\tif (!typeIs(str, String.TYPE_NAME)) errorCast(str, String);\r\n\t\treturn 1 === str.length;\r\n\t}\r\n\r\n\treturn {\r\n\t\tisChar: isChar,\r\n\t\tisNumber: Number.isNumber,\r\n\t\tisAlphabet: isAlphabet,\r\n\t\tisNumberOrAlphabet: function (arg) {\r\n\t\t\treturn Number.isNumber(arg) || isAlphabet(arg);\r\n\t\t},\r\n\t\tisASCII(input) {\r\n\t\t\tif (!isChar(input)) invaildCharacter(input);\r\n\t\t\treturn input.charAodeAt(0) < 128;\r\n\t\t},\r\n\t\tisSpace: function (input) {\r\n\t\t\tif (!isChar(input)) invaildCharacter(input);\r\n\t\t\t// return Array.has(SPACE, input);\r\n\t\t\treturn Char.Space.REGX.test(input);\r\n\t\t},\r\n\t\tchange: function (value, count) {\r\n\t\t\tif (!Number.isNumber(count)) errorCast(count, Number);\r\n\t\t\tif (isChar(value)) {\r\n\t\t\t\treturn String.fromCharCode(value.charCodeAt(0) + count);\r\n\t\t\t} else {\r\n\t\t\t\tunsupportedOperation(value + \" 不是合法的字符\");\r\n\t\t\t}\r\n\t\t},\r\n\t\tcompare: function (char1, char2) {\r\n\t\t\tif (!isChar(char1)) invaildCharacter(char1);\r\n\t\t\tif (!isChar(char2)) invaildCharacter(char2);\r\n\t\t\treturn char1.charCodeAt(0) - char2.charCodeAt(0);\r\n\t\t},\r\n\t\tasUnicodeEncode: function (input) {\r\n\t\t\tvar code;\r\n\t\t\tif (!Number.isNumber(input)) {\r\n\t\t\t\tif (!isChar(input)) invaildCharacter(input);\r\n\t\t\t\tcode = (input.charCodeAt(0)).toString(16);\r\n\t\t\t} else {\r\n\t\t\t\tcode = (input).toString();\r\n\t\t\t}\r\n\t\t\tcode = code.toUpperCase();\r\n\t\t\tswitch (code.length) {\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tcode = \"000\" + code;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tcode = \"00\" + code;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tcode = \"0\" + code;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\treturn \"\\\\u\" + code;\r\n\t\t},\r\n\t\tZERO: ZERO,\r\n\t\tNINE: NINE,\r\n\t\tUPPER_A: UPPER_A,\r\n\t\tUPPER_Z: UPPER_Z,\r\n\t\tLOWER_A: LOWER_A,\r\n\t\tLOWER_Z: LOWER_Z\r\n\t};\r\n})();\r\n\r\nconst NumberUtil = {\r\n\taddBeforeZero: function (arg, length) {\r\n\t\tif (!typeIs(arg, Number.TYPE_NAME)) unsupportedType(arg);\r\n\t\tif (!typeIs(length, Number.TYPE_NAME)) unsupportedType(length);\r\n\r\n\t\tvar r = [];\r\n\t\tfor (let i = 0; i < length; i++) {\r\n\t\t\tr.push(\"0\");\r\n\t\t}\r\n\t\treturn r.join(EMPTY_STRING) + arg;\r\n\t},\r\n\twithComma: (num, cutSize = 3) => {\r\n\r\n\t\tlet sNum = (num || 0).toString(), result = String.BLANK;\r\n\t\twhile (sNum.length > cutSize) {\r\n\t\t\tresult = Char.COMMA + num.slice(-cutSize) + result;\r\n\t\t\tsNum = sNum.slice(0, sNum.length - cutSize);\r\n\t\t}\r\n\t\tif (sNum) {\r\n\t\t\tresult = sNum + result;\r\n\t\t}\r\n\t\treturn result;\r\n\t},\r\n\tparseInt: function (num, nag) {\r\n\t\treturn parseNumber(num, nag, parseInt);\r\n\t},\r\n\tparseFloat: function (num, nag) {\r\n\t\treturn parseNumber(num, nag, parseFloat);\r\n\t}\r\n};\r\n\r\nmodule.exports = exports = {\r\n\tgetNull: () => {\r\n\t\treturn Null;\r\n\t},\r\n\tgetUndefined: () => {\r\n\t\treturn Undefined;\r\n\t},\r\n\tInterface: Interface,\r\n\tIterator: Iterator,\r\n\tMathUtil: MathUtil,\r\n\tObjectUtil: ObjectUtil,\r\n\tStringUtil: StringUtil,\r\n\tNumberUtil: NumberUtil,\r\n\tCharUtil: CharUtil\r\n}\n\n//# sourceURL=webpack://hiton/./node_modules/coralian/src/lib/util.js?");

/***/ }),

/***/ "./node_modules/coralian/src/lib sync recursive ^\\.\\/.*$":
/*!******************************************************!*\
  !*** ./node_modules/coralian/src/lib/ sync ^\.\/.*$ ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var map = {\n\t\"./Calendar\": \"./node_modules/coralian/src/lib/Calendar.js\",\n\t\"./Calendar.js\": \"./node_modules/coralian/src/lib/Calendar.js\",\n\t\"./Formatter\": \"./node_modules/coralian/src/lib/Formatter.js\",\n\t\"./Formatter.js\": \"./node_modules/coralian/src/lib/Formatter.js\",\n\t\"./Random\": \"./node_modules/coralian/src/lib/Random.js\",\n\t\"./Random.js\": \"./node_modules/coralian/src/lib/Random.js\",\n\t\"./ReplaceHolder\": \"./node_modules/coralian/src/lib/ReplaceHolder.js\",\n\t\"./ReplaceHolder.js\": \"./node_modules/coralian/src/lib/ReplaceHolder.js\",\n\t\"./Validator\": \"./node_modules/coralian/src/lib/Validator.js\",\n\t\"./Validator.js\": \"./node_modules/coralian/src/lib/Validator.js\",\n\t\"./dom\": \"./node_modules/coralian/src/lib/dom.js\",\n\t\"./dom.js\": \"./node_modules/coralian/src/lib/dom.js\",\n\t\"./logger\": \"./node_modules/coralian/src/lib/logger.js\",\n\t\"./logger.js\": \"./node_modules/coralian/src/lib/logger.js\",\n\t\"./util\": \"./node_modules/coralian/src/lib/util.js\",\n\t\"./util.js\": \"./node_modules/coralian/src/lib/util.js\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./node_modules/coralian/src/lib sync recursive ^\\\\.\\\\/.*$\";\n\n//# sourceURL=webpack://hiton/./node_modules/coralian/src/lib/_sync_^\\.\\/.*$?");

/***/ }),

/***/ "./node_modules/jsconst/src/index.js":
/*!*******************************************!*\
  !*** ./node_modules/jsconst/src/index.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("var __dirname = \"/\";\nconst root = {};\r\n\r\n__webpack_require__(/*! ./lib/init */ \"./node_modules/jsconst/src/lib/init.js\");\r\n\r\n(() => { // 因为第七行这里有中止处理，所以需要套一个函数作为外壳，不然会报错\r\n\tif (typeof(window) !== 'undefined') {\r\n\t\tif (typeof(window[\"JsConst\"]) !== 'undefined') return;\r\n\t\r\n\t\ttry {\r\n\t\t\tfunction putObject(parent, names) {\r\n\t\t\t\tlet name = names.shift();\r\n\t\r\n\t\t\t\tif (!name) return;\r\n\t\r\n\t\t\t\tif (!parent[name]) {\r\n\t\t\t\t\tlet object = parent[name] = {};\r\n\t\t\t\t\tputObject(object, names);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\r\n\t\t\tfunction getObject (parent, names) {\r\n\t\t\t\tlet name = names.shift();\r\n\t\t\t\tif (!name) {\r\n\t\t\t\t\treturn parent;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (!parent[name]) { // 这里是为了防止 put 的时候没有 put 进去造成的错误\r\n\t\t\t\t\t\tparent[name] = {};\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn getObject(parent[name], names);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction read (now, parent) {\r\n\t\t\t\tconst _lib = __webpack_require__(\"./node_modules/jsconst/src/modules sync recursive ^\\\\.\\\\/.*$\");\r\n\t\t\t\t_lib.keys().forEach(key => {\r\n\t\r\n\t\t\t\t\tlet path = key.slice(2);\r\n\t\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t* 输出有四种模式：\r\n\t\t\t\t\t* 文件夹\r\n\t\t\t\t\t* 文件夹/\r\n\t\t\t\t\t* 文件夹/文件名\r\n\t\t\t\t\t* 文件夹/文件名.js\r\n\t\t\t\t\t* \r\n\t\t\t\t\t* 因为 文件夹/ 和  文件夹/文件名.js 具有可判断性，所以保留，其余不做处理\r\n\t\t\t\t\t*/\r\n\t\t\t\t\tif (path.indexOf(\".js\") === path.length - 3) {\r\n\t\t\t\t\t\tlet names = path.slice(0,  path.length - 3).split(\"/\");\r\n\t\t\t\t\t\tlet fileName = names.pop();\r\n\t\t\t\t\t\tlet obj = getObject(root, names);\r\n\t\t\t\t\t\tif (fileName === \"index\") {\r\n\t\t\t\t\t\t\tobj = Object.assign(obj, _lib(key));\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tobj[fileName] = _lib(key);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (path.indexOf(\"/\") === path.length - 1) {\r\n\t\t\t\t\t\tlet names = path.slice(0,  path.length - 1).split(\"/\");\r\n\t\r\n\t\t\t\t\t\tputObject(root, names);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\r\n\t\t\tread(\"modules\", \".\");\r\n\t\r\n\t\t\twindow.JsConst = root;\r\n\t\t} catch (e) {\r\n\t\t\tconsole.log(e);\r\n\t\t}\r\n\t} else {\r\n\t\tif (__webpack_require__.g.JsConst) return;\r\n\t\r\n\t\ttry {\r\n\t\t\tconst fs = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'fs'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\r\n\t\r\n\t\t\tfunction read (modules, parent, object) {\r\n\t\t\t\tmodules.map(module => {\r\n\t\t\t\t\tlet path = `${parent}/${module}`;\r\n\t\t\t\t\tlet stat = fs.statSync(path);\r\n\t\t\t\t\tlet name = module.split(\".\")[0];\r\n\t\r\n\t\t\t\t\tif (stat.isFile()) {\r\n\t\t\t\t\t\tif (module === \"index.js\") return;\r\n\t\t\t\t\t\tobject[name] = __webpack_require__(\"./node_modules/jsconst/src sync recursive\")(path);\r\n\t\t\t\t\t} else if (stat.isDirectory()) {\r\n\t\t\t\t\t\tlet index = `${path}/index.js`;\r\n\t\t\t\t\t\tlet sub = object[name] = fs.existsSync(index) ?  __webpack_require__(\"./node_modules/jsconst/src sync recursive\")(index) : {};\r\n\t\t\t\t\t\tread(fs.readdirSync(path), path, sub);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\r\n\t\t\tread(fs.readdirSync(__dirname + \"/modules\"), __dirname + \"/modules\", root);\r\n\t\r\n\t\t\t__webpack_require__.g.JsConst = root;\r\n\t\t} catch {\r\n\t\t}\r\n\t}\t\r\n})();\r\n\n\n//# sourceURL=webpack://hiton/./node_modules/jsconst/src/index.js?");

/***/ }),

/***/ "./node_modules/jsconst/src/lib/init.js":
/*!**********************************************!*\
  !*** ./node_modules/jsconst/src/lib/init.js ***!
  \**********************************************/
/***/ (() => {

eval("\r\n// String\r\nif (!String.BINARY) {\r\n\tObject.defineProperty(String, \"BINARY\", {\r\n\t\tget: () => {\r\n\t\t\treturn \"binary\";\r\n\t\t}\r\n\t});\r\n\tObject.defineProperty(String, \"BLANK\", {\r\n\t\tget: () => {\r\n\t\t\treturn \"\";\r\n\t\t}\r\n\t});\r\n}\r\n\r\n\r\n// 数组\r\nif (!Array.TYPE_NAME) {\r\n\tObject.defineProperty(Array, \"TYPE_NAME\", {\r\n\t\tget: () => {\r\n\t\t\treturn \"array\";\r\n\t\t}\r\n\t});\r\n}\r\n// Boolean\r\nif (!Boolean.TYPE_NAME) {\r\n\tObject.defineProperty(Boolean, \"TYPE_NAME\", {\r\n\t\tget: () => {\r\n\t\t\treturn \"boolean\";\r\n\t\t}\r\n\t});\r\n}\r\n// 错误\r\nif (!Error.TYPE_NAME) {\r\n\tObject.defineProperty(Error, \"TYPE_NAME\", {\r\n\t\tget: () => {\r\n\t\t\treturn \"error\";\r\n\t\t}\r\n\t});\r\n}\r\n// 函数\r\nif (!Function.TYPE_NAME) {\r\n\tObject.defineProperty(Function, \"TYPE_NAME\", {\r\n\t\tget: () => {\r\n\t\t\treturn \"function\";\r\n\t\t}\r\n\t});\r\n}\r\n// 字符串\r\nif (!String.TYPE_NAME) {\r\n\tObject.defineProperty(String, \"TYPE_NAME\", {\r\n\t\tget: () => {\r\n\t\t\treturn \"string\";\r\n\t\t}\r\n\t});\r\n}\r\n// 正则表达式\r\nif (!RegExp.TYPE_NAME) {\r\n\tObject.defineProperty(RegExp, \"TYPE_NAME\", {\r\n\t\tget: () => {\r\n\t\t\treturn \"regexp\";\r\n\t\t}\r\n\t});\r\n}\r\n// 日期\r\nif (!Date.TYPE_NAME) {\r\n\tObject.defineProperty(Date, \"TYPE_NAME\", {\r\n\t\tget: () => {\r\n\t\t\treturn \"date\";\r\n\t\t}\r\n\t});\r\n}\r\n// 数字\r\nif (!Number.TYPE_NAME) {\r\n\tObject.defineProperty(Number, \"TYPE_NAME\", {\r\n\t\tget: () => {\r\n\t\t\treturn \"number\";\r\n\t\t}\r\n\t});\r\n}\r\n// 数字 - NaN\r\nif (!Number.NaN_TYPE_NAME) {\r\n\tObject.defineProperty(Number, \"NaN_TYPE_NAME\", {\r\n\t\tget: () => {\r\n\t\t\treturn \"NaN\";\r\n\t\t}\r\n\t});\r\n}\r\n// 数字 无限大\r\nif (!Number.Infinity_TYPE_NAME) {\r\n\tObject.defineProperty(Number, \"Infinity_TYPE_NAME\", {\r\n\t\tget: () => {\r\n\t\t\treturn \"Infinity\";\r\n\t\t}\r\n\t});\r\n}\r\n// Object\r\nif (!Object.TYPE_NAME) {\r\n\tObject.defineProperty(Object, \"TYPE_NAME\", {\r\n\t\tget: () => {\r\n\t\t\treturn \"object\";\r\n\t\t}\r\n\t});\r\n}\r\n\r\n//  ES6 新增\r\nif (Set && !Array.TYPE_NAME) {\r\n\tObject.defineProperty(Set, \"TYPE_NAME\", {\r\n\t\tget: () => {\r\n\t\t\treturn \"set\";\r\n\t\t}\r\n\t});\r\n}\r\nif (WeakSet && !WeakSet.TYPE_NAME) {\r\n\tObject.defineProperty( WeakSet, \"TYPE_NAME\", {\r\n\t\tget: () => {\r\n\t\t\treturn \"weakset\";\r\n\t\t}\r\n\t});\r\n}\r\nif (Map && !Map.TYPE_NAME) {\r\n\tObject.defineProperty(Map, \"TYPE_NAME\", {\r\n\t\tget: () => {\r\n\t\t\treturn \"set\";\r\n\t\t}\r\n\t});\r\n}\r\nif (WeakMap && !WeakMap.TYPE_NAME) {\r\n\tObject.defineProperty( WeakMap, \"TYPE_NAME\", {\r\n\t\tget: () => {\r\n\t\t\treturn \"weakset\";\r\n\t\t}\r\n\t});\r\n}\r\nif (Symbol && !Symbol.TYPE_NAME) {\r\n\tObject.defineProperty(Symbol, \"TYPE_NAME\", {\r\n\t\tget: () => {\r\n\t\t\treturn \"symbol\";\r\n\t\t}\r\n\t});\r\n}\n\n//# sourceURL=webpack://hiton/./node_modules/jsconst/src/lib/init.js?");

/***/ }),

/***/ "./node_modules/jsconst/src/modules/CharCode/Lower.js":
/*!************************************************************!*\
  !*** ./node_modules/jsconst/src/modules/CharCode/Lower.js ***!
  \************************************************************/
/***/ ((module) => {

eval("module.exports = { // 小写字母字母的 ASCII 编号\r\n    A: 0x0061,\r\n    Z: 0x007A,\r\n    F: 0x0066\r\n};\n\n//# sourceURL=webpack://hiton/./node_modules/jsconst/src/modules/CharCode/Lower.js?");

/***/ }),

/***/ "./node_modules/jsconst/src/modules/CharCode/Upper.js":
/*!************************************************************!*\
  !*** ./node_modules/jsconst/src/modules/CharCode/Upper.js ***!
  \************************************************************/
/***/ ((module) => {

eval("module.exports = { // 大写字母字母的 ASCII 编号\r\n    A: 0x0041,\r\n    Z: 0x005A,\r\n    F: 0x0046\r\n};\n\n//# sourceURL=webpack://hiton/./node_modules/jsconst/src/modules/CharCode/Upper.js?");

/***/ }),

/***/ "./node_modules/jsconst/src/modules/CharCode/index.js":
/*!************************************************************!*\
  !*** ./node_modules/jsconst/src/modules/CharCode/index.js ***!
  \************************************************************/
/***/ ((module) => {

eval("module.exports = {\r\n    ZERO: 0x0030,\r\n\tNINE: 0x0039,\r\n\t// 特殊符号的 ASCII 编号\r\n\tUNDERBAR: 0x005F, // _\r\n\tDOLLAR: 0x0024, // $,;\r\n}\n\n//# sourceURL=webpack://hiton/./node_modules/jsconst/src/modules/CharCode/index.js?");

/***/ }),

/***/ "./node_modules/jsconst/src/modules/Char/Angle.js":
/*!********************************************************!*\
  !*** ./node_modules/jsconst/src/modules/Char/Angle.js ***!
  \********************************************************/
/***/ ((module) => {

eval("module.exports = {\r\n    LEFT: \"<\",\r\n\tRIGHT: \">\"\r\n}\n\n//# sourceURL=webpack://hiton/./node_modules/jsconst/src/modules/Char/Angle.js?");

/***/ }),

/***/ "./node_modules/jsconst/src/modules/Char/Bracket.js":
/*!**********************************************************!*\
  !*** ./node_modules/jsconst/src/modules/Char/Bracket.js ***!
  \**********************************************************/
/***/ ((module) => {

eval("module.exports = {\r\n\tLEFT: \"{\",\r\n\tRIGHT: \"}\",\r\n}\n\n//# sourceURL=webpack://hiton/./node_modules/jsconst/src/modules/Char/Bracket.js?");

/***/ }),

/***/ "./node_modules/jsconst/src/modules/Char/Parenthe.js":
/*!***********************************************************!*\
  !*** ./node_modules/jsconst/src/modules/Char/Parenthe.js ***!
  \***********************************************************/
/***/ ((module) => {

eval("module.exports = {\r\n\tLEFT: \"(\",\r\n\tRIGHT: \")\",\r\n}\n\n//# sourceURL=webpack://hiton/./node_modules/jsconst/src/modules/Char/Parenthe.js?");

/***/ }),

/***/ "./node_modules/jsconst/src/modules/Char/Space.js":
/*!********************************************************!*\
  !*** ./node_modules/jsconst/src/modules/Char/Space.js ***!
  \********************************************************/
/***/ ((module) => {

eval("module.exports = {\r\n    REGX: /\\s/, // 标准空白\r\n    SPACE: \" \", // 标准空白\r\n\tTAB: \"\\t\",\r\n    LF: \"\\n\",\r\n    CR: \"\\r\"\r\n}\n\n//# sourceURL=webpack://hiton/./node_modules/jsconst/src/modules/Char/Space.js?");

/***/ }),

/***/ "./node_modules/jsconst/src/modules/Char/SquareBracket.js":
/*!****************************************************************!*\
  !*** ./node_modules/jsconst/src/modules/Char/SquareBracket.js ***!
  \****************************************************************/
/***/ ((module) => {

eval("module.exports = {\r\n\tLEFT: \"[\",\r\n\tRIGHT: \"]\",\r\n};\n\n//# sourceURL=webpack://hiton/./node_modules/jsconst/src/modules/Char/SquareBracket.js?");

/***/ }),

/***/ "./node_modules/jsconst/src/modules/Char/index.js":
/*!********************************************************!*\
  !*** ./node_modules/jsconst/src/modules/Char/index.js ***!
  \********************************************************/
/***/ ((module) => {

eval("module.exports = {\r\n    ZERO_WIDTH: \"\\uFEFF\",\r\n\tBLANK: \"\",\r\n\tQUESTION: \"?\",\r\n\tDQUOTE: \"\\\"\",\r\n\tQUOTE: \"'\",\r\n\tGRAVE_ACCENT: \"`\",\r\n\tUNDER_SOURCE: \"_\",\r\n\tBSLASH: \"\\\\\",\r\n\tSLASH: \"/\",\r\n\tASTERISK: \"*\",\r\n\tAT: \"@\",\r\n\tAND: \"&\",\r\n\tSHARP: \"#\",\r\n\tCOMMA: \",\",\r\n\tSEMICOLON: \";\",\r\n\tCOLON: \":\",\r\n\t// LEFT_BRACKET: \"{\",\r\n\t// RIGHT_BRACKET: \"}\",\r\n\t// LEFT_SQUARE_BRACKET: \"[\",\r\n\t// RIGHT_SQUARE_BRACKET: \"]\",\r\n\t// LEFT_PARENTHE: \"(\",\r\n\t// RIGHT_PARENTHE: \")\",\r\n\tPOINT: \".\",\r\n\tHYPHEN: \"-\",\r\n\tEQUALS: \"=\",\r\n\tTILDE: \"~\",\r\n\tEXCALMATORY: \"!\",\r\n    NEW_LINE_REGX: /(\\r\\n|\\r|\\n)/\r\n\t// LEFT_ANGLE: \"<\",\r\n\t// RIGHT_ANGLE: \">\"\r\n};\n\n//# sourceURL=webpack://hiton/./node_modules/jsconst/src/modules/Char/index.js?");

/***/ }),

/***/ "./node_modules/jsconst/src/modules/Encoding.js":
/*!******************************************************!*\
  !*** ./node_modules/jsconst/src/modules/Encoding.js ***!
  \******************************************************/
/***/ ((module) => {

eval("module.exports = {\r\n    UTF8: \"utf-8\",\r\n    ACSII: \"acsii\",\r\n    Unicode: \"unicode\",\r\n    GBK: \"GBK\",\r\n    BASE64: \"base64\"\r\n}\n\n//# sourceURL=webpack://hiton/./node_modules/jsconst/src/modules/Encoding.js?");

/***/ }),

/***/ "./node_modules/jsconst/src/modules/HTML/RequestMethod.js":
/*!****************************************************************!*\
  !*** ./node_modules/jsconst/src/modules/HTML/RequestMethod.js ***!
  \****************************************************************/
/***/ ((module) => {

eval("module.exports = {\r\n    GET: \"GET\",\r\n    PUT: \"PUT\",\r\n    POST: \"POST\",\r\n    DELETE: \"DELETE\",\r\n    CONNECT: \"CONNECT\",\r\n    HEAD: \"HEAD\",\r\n    OPTIONS: \"OPTIONS\",\r\n    TRACE: \"TRACE\",\r\n    PATCH: \"PATCH\",\r\n    WEBSOCKT: \"WS\"\r\n};\n\n//# sourceURL=webpack://hiton/./node_modules/jsconst/src/modules/HTML/RequestMethod.js?");

/***/ }),

/***/ "./node_modules/jsconst/src/modules/HTML/StatusCode.js":
/*!*************************************************************!*\
  !*** ./node_modules/jsconst/src/modules/HTML/StatusCode.js ***!
  \*************************************************************/
/***/ ((module) => {

eval("module.exports = {\r\n    CONTINUE: 100,\r\n    SWITCHING_PROTOCOLS: 101,\r\n    PROCESSING: 102,\r\n    OK: 200,\r\n    CREATED: 201,\r\n    ACCEPTED: 202,\r\n    NON_AUTHORITATIVE_INFORMATION: 203,\r\n    NO_CONTENT: 204,\r\n    RESET_CONTENT: 205,\r\n    PARTIAL_CONTENT: 206,\r\n    MULTI_STATUS: 207,\r\n    ALREADY_REPORTED: 208,\r\n    IM_USED: 226,\r\n    MULTIPLE_CHOICES: 300,\r\n    MOVED_PERMANENTLY: 301,\r\n    FOUND: 302,\r\n    SEE_OTHER: 303,\r\n    NOT_MODIFIED: 304,\r\n    USE_PROXY: 305,\r\n    TEMPORARY_REDIRECT: 307,\r\n    PERMANENT_REDIRECT: 308,\r\n    BAD_REQUEST: 400,\r\n    UNAUTHORIZED: 401,\r\n    PAYMENT_REQUIRED: 402,\r\n    FORBIDDEN: 403,\r\n    NOT_FOUND: 404,\r\n    METHOD_NOT_ALLOWED: 405,\r\n    NOT_ACCEPTABLE: 406,\r\n    PROXY_AUTHENTICATION_REQUIRED: 407,\r\n    REQUEST_TIMEOUT: 408,\r\n    CONFLICT: 409,\r\n    GONE: 410,\r\n    LENGTH_REQUIRED: 411,\r\n    PRECONDITION_FAILED: 412,\r\n    PAYLOAD_TOO_LARGE: 413,\r\n    URI_TOO_LONG: 414,\r\n    UNSUPPORTED_MEDIA_TYPE: 415,\r\n    RANGE_NOT_SATISFIABLE: 416,\r\n    EXPECTATION_FAILED: 417,\r\n    I_AM_A_TEAPOT: 418,\r\n    MISDIRECTED_REQUEST: 421,\r\n    UNPROCESSABLE_ENTITY: 422,\r\n    LOCKED: 423,\r\n    FAILED_DEPENDENCY: 424,\r\n    UNORDERED_COLLECTION: 425,\r\n    UPGRADE_REQUIRED: 426,\r\n    PRECONDITION_REQUIRED: 428,\r\n    TOO_MANY_REQUESTS: 429,\r\n    REQUEST_HEADER_FIELDS_TOO_LARGE: 431,\r\n    UNAVAILABLE_FOR_LEGAL_REASONS: 451,\r\n    INTERNAL_SERVER_ERROR: 500,\r\n    NOT_IMPLEMENTED: 501,\r\n    BAD_GATEWAY: 502,\r\n    SERVICE_UNAVAILABLE: 503,\r\n    GATEWAY_TIMEOUT: 504,\r\n    HTTP_VERSION_NOT_SUPPORTED: 505,\r\n    VARIANT_ALSO_NEGOTIATES: 506,\r\n    INSUFFICIENT_STORAGE: 507,\r\n    LOOP_DETECTED: 508,\r\n    BANDWIDTH_LIMIT_EXCEEDED: 509,\r\n    NOT_EXTENDED: 510,\r\n    NETWORK_AUTHENTICATION_REQUIRED: 511\r\n};\n\n//# sourceURL=webpack://hiton/./node_modules/jsconst/src/modules/HTML/StatusCode.js?");

/***/ }),

/***/ "./node_modules/jsconst/src/modules/HTML/Tag.js":
/*!******************************************************!*\
  !*** ./node_modules/jsconst/src/modules/HTML/Tag.js ***!
  \******************************************************/
/***/ ((module) => {

eval("module.exports = {\r\n    A: \"a\",\r\n    ABBR: \"abbr\",\r\n    ACRONYM: \"acronym\",\r\n    ADDRESS: \"address\",\r\n    APPLET: \"applet\",\r\n    AREA: \"area\",\r\n    ARTICLE: \"article\",\r\n    ASIDE: \"aside\",\r\n    AUDIO: \"audio\",\r\n    B: \"b\",\r\n    BASE: \"base\",\r\n    BASEFONT: \"basefont\",\r\n    BDI: \"bdi\",\r\n    BDO: \"bdo\",\r\n    BIG: \"big\",\r\n    BLOCKQUOTE: \"blockquote\",\r\n    BODY: \"body\",\r\n    BR: \"br\",\r\n    BUTTON: \"button\",\r\n    CANVAS: \"canvas\",\r\n    CAPTION: \"caption\",\r\n    CENTER: \"center\",\r\n    CITE: \"cite\",\r\n    CODE: \"code\",\r\n    COL: \"col\",\r\n    COLGROUP: \"colgroup\",\r\n    COMMAND: \"command\",\r\n    DATALIST: \"datalist\",\r\n    DD: \"dd\",\r\n    DEL: \"del\",\r\n    DETAILS: \"details\",\r\n    DFN: \"dfn\",\r\n    DIALOG: \"dialog\",\r\n    DIR: \"dir\",\r\n    DIV: \"div\",\r\n    DL: \"dl\",\r\n    DT: \"dt\",\r\n    EM: \"em\",\r\n    EMBED: \"embed\",\r\n    FIELDSET: \"fieldset\",\r\n    FIGCAPTION: \"figcaption\",\r\n    FIGURE: \"figure\",\r\n    FONT: \"font\",\r\n    FOOTER: \"footer\",\r\n    FORM: \"form\",\r\n    FRAME: \"frame\",\r\n    FRAMESET: \"frameset\",\r\n    H1: \"h1\",\r\n    H2: \"h2\",\r\n    H3: \"h3\",\r\n    H4: \"h4\",\r\n    H5: \"h5\",\r\n    H6: \"h6\",\r\n    HEAD: \"head\",\r\n    HEADER: \"header\",\r\n    HR: \"hr\",\r\n    HTML: \"html\",\r\n    I: \"i\",\r\n    IFRAME: \"iframe\",\r\n    IMG: \"img\",\r\n    INPUT: \"input\",\r\n    INS: \"ins\",\r\n    KBD: \"kbd\",\r\n    KEYGEN: \"keygen\",\r\n    LABEL: \"label\",\r\n    LEGEND: \"legend\",\r\n    LI: \"li\",\r\n    LINK: \"link\",\r\n    MAP: \"map\",\r\n    MARK: \"mark\",\r\n    MENU: \"menu\",\r\n    META: \"meta\",\r\n    METER: \"meter\",\r\n    NAV: \"nav\",\r\n    NOFRAMES: \"noframes\",\r\n    NOSCRIPT: \"noscript\",\r\n    OBJECT: \"object\",\r\n    OL: \"ol\",\r\n    OPTGROUP: \"optgroup\",\r\n    OPTION: \"option\",\r\n    OUTPUT: \"output\",\r\n    P: \"p\",\r\n    PARAM: \"param\",\r\n    PRE: \"pre\",\r\n    PROGRESS: \"progress\",\r\n    Q: \"q\",\r\n    RP: \"rp\",\r\n    RT: \"rt\",\r\n    RUBY: \"ruby\",\r\n    S: \"s\",\r\n    SAMP: \"samp\",\r\n    SCRIPT: \"script\",\r\n    SECTION: \"section\",\r\n    SELECT: \"select\",\r\n    SMALL: \"small\",\r\n    SOURCE: \"source\",\r\n    SPAN: \"span\",\r\n    STRIKE: \"strike\",\r\n    STRONG: \"strong\",\r\n    STYLE: \"style\",\r\n    SUB: \"sub\",\r\n    SUMMARY: \"summary\",\r\n    SUP: \"sup\",\r\n    TABLE: \"table\",\r\n    TBODY: \"tbody\",\r\n    TD: \"td\",\r\n    TEXTAREA: \"textarea\",\r\n    TFOOT: \"tfoot\",\r\n    TH: \"th\",\r\n    THEAD: \"thead\",\r\n    TIME: \"time\",\r\n    TITLE: \"title\",\r\n    TR: \"tr\",\r\n    TRACK: \"track\",\r\n    TT: \"tt\",\r\n    U: \"u\",\r\n    UL: \"ul\",\r\n    VAR: \"var\",\r\n    VIDEO: \"video\",\r\n    WBR: \"wbr\"\r\n};\n\n//# sourceURL=webpack://hiton/./node_modules/jsconst/src/modules/HTML/Tag.js?");

/***/ }),

/***/ "./node_modules/jsconst/src/modules/HTML/TagAttribute/input.js":
/*!*********************************************************************!*\
  !*** ./node_modules/jsconst/src/modules/HTML/TagAttribute/input.js ***!
  \*********************************************************************/
/***/ ((module) => {

eval("module.exports = {\r\n    BUTTON: \"button\",\r\n    CHECKBOX: \"checkbox\",\r\n    COLOR: \"color\",\r\n    DATE: \"date\",\r\n    DATETIME_LOCAL: \"datetime-local\",\r\n    EMAIL: \"email\",\r\n    FILE: \"file\",\r\n    HIDDEN: \"hidden\",\r\n    IMAGE: \"image\",\r\n    MONTH: \"month\",\r\n    NUMBER: \"number\",\r\n    PASSWORD: \"password\",\r\n    RADIO: \"radio\",\r\n    RANGE: \"range\",\r\n    RESET: \"reset\",\r\n    SEARCH: \"search\",\r\n    SUBMIT: \"submit\",\r\n    TEL: \"tel\",\r\n    TEXT: \"text\",\r\n    TIME: \"time\",\r\n    URL: \"url\",\r\n    WEEK: \"week\",\r\n};\n\n//# sourceURL=webpack://hiton/./node_modules/jsconst/src/modules/HTML/TagAttribute/input.js?");

/***/ }),

/***/ "./node_modules/jsconst/src/modules/HTML/Unit.js":
/*!*******************************************************!*\
  !*** ./node_modules/jsconst/src/modules/HTML/Unit.js ***!
  \*******************************************************/
/***/ ((module, exports) => {

eval("exports = module.exports = {\r\n    PERCENT: \"%\",\r\n    PX: \"px\",\r\n    EM: \"em\",\r\n    REM: \"rem\",\r\n    VW: \"vw\",\r\n    VH: \"vh\",\r\n    PT: \"pt\",\r\n    RPX: \"rpx\"\r\n}\n\n//# sourceURL=webpack://hiton/./node_modules/jsconst/src/modules/HTML/Unit.js?");

/***/ }),

/***/ "./node_modules/jsconst/src/modules/MimeType.js":
/*!******************************************************!*\
  !*** ./node_modules/jsconst/src/modules/MimeType.js ***!
  \******************************************************/
/***/ ((module) => {

eval("module.exports = {\r\n\t// application\r\n\tJSON: \"application/json\",\r\n\tPDF: \"application/pdf\",\r\n\tJAVASCRIPT: \"application/javascript\",\r\n\tOCTET_STREAM: \"application/octet-stream\",\r\n\tDTD: \"application/xml-dtd\",\r\n\tZIP: \"application/zip\",\r\n\t// text\r\n\tTEXT: \"text/plain\",\r\n\tHTML: \"text/html\",\r\n\tXML: \"text/xml\",\r\n\tCSS: \"text/css\",\r\n\tCSV: \"text/csv\",\r\n\t// image\r\n\tGIF: \"image/gif\",\r\n\tPNG: \"image/png\",\r\n\tJPG: \"image/jpeg\",\r\n\tBMP: \"image/bmp\",\r\n\tWEBP: \"image/webp\",\r\n\tICON: \"image/x-icon\",\r\n\tSVG: \"image/svg+xml\"\r\n}\n\n//# sourceURL=webpack://hiton/./node_modules/jsconst/src/modules/MimeType.js?");

/***/ }),

/***/ "./node_modules/jsconst/src/modules/RegxType.js":
/*!******************************************************!*\
  !*** ./node_modules/jsconst/src/modules/RegxType.js ***!
  \******************************************************/
/***/ ((module) => {

eval("module.exports = {\r\n    GLOBAL: \"g\",\r\n    IGNORE_CASE: \"i\",\r\n    FORCE: \"f\",\r\n    MUTLI_LINE: \"m\"\r\n};\n\n//# sourceURL=webpack://hiton/./node_modules/jsconst/src/modules/RegxType.js?");

/***/ }),

/***/ "./node_modules/jsconst/src/modules/XmlEntity.js":
/*!*******************************************************!*\
  !*** ./node_modules/jsconst/src/modules/XmlEntity.js ***!
  \*******************************************************/
/***/ ((module) => {

eval("module.exports = {\r\n    LT: \"&lt;\", // <\r\n    GT: \"&gt;\",  // >\r\n    AMP: \"&amp;\", // &\r\n    QUOT: \"&quot;\", // \"\r\n    APOS: \"&apos;\", // '\r\n    SHARP: \"&#35;\", // #\r\n    SPACE: \"&nbsp;\",\r\n    ZERO_WIDTH: \"&#8203;\" // 零宽字符\r\n}\n\n//# sourceURL=webpack://hiton/./node_modules/jsconst/src/modules/XmlEntity.js?");

/***/ }),

/***/ "./node_modules/jsconst/src/modules sync recursive ^\\.\\/.*$":
/*!*********************************************************!*\
  !*** ./node_modules/jsconst/src/modules/ sync ^\.\/.*$ ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var map = {\n\t\"./Char\": \"./node_modules/jsconst/src/modules/Char/index.js\",\n\t\"./Char/\": \"./node_modules/jsconst/src/modules/Char/index.js\",\n\t\"./Char/Angle\": \"./node_modules/jsconst/src/modules/Char/Angle.js\",\n\t\"./Char/Angle.js\": \"./node_modules/jsconst/src/modules/Char/Angle.js\",\n\t\"./Char/Bracket\": \"./node_modules/jsconst/src/modules/Char/Bracket.js\",\n\t\"./Char/Bracket.js\": \"./node_modules/jsconst/src/modules/Char/Bracket.js\",\n\t\"./Char/Parenthe\": \"./node_modules/jsconst/src/modules/Char/Parenthe.js\",\n\t\"./Char/Parenthe.js\": \"./node_modules/jsconst/src/modules/Char/Parenthe.js\",\n\t\"./Char/Space\": \"./node_modules/jsconst/src/modules/Char/Space.js\",\n\t\"./Char/Space.js\": \"./node_modules/jsconst/src/modules/Char/Space.js\",\n\t\"./Char/SquareBracket\": \"./node_modules/jsconst/src/modules/Char/SquareBracket.js\",\n\t\"./Char/SquareBracket.js\": \"./node_modules/jsconst/src/modules/Char/SquareBracket.js\",\n\t\"./Char/index\": \"./node_modules/jsconst/src/modules/Char/index.js\",\n\t\"./Char/index.js\": \"./node_modules/jsconst/src/modules/Char/index.js\",\n\t\"./CharCode\": \"./node_modules/jsconst/src/modules/CharCode/index.js\",\n\t\"./CharCode/\": \"./node_modules/jsconst/src/modules/CharCode/index.js\",\n\t\"./CharCode/Lower\": \"./node_modules/jsconst/src/modules/CharCode/Lower.js\",\n\t\"./CharCode/Lower.js\": \"./node_modules/jsconst/src/modules/CharCode/Lower.js\",\n\t\"./CharCode/Upper\": \"./node_modules/jsconst/src/modules/CharCode/Upper.js\",\n\t\"./CharCode/Upper.js\": \"./node_modules/jsconst/src/modules/CharCode/Upper.js\",\n\t\"./CharCode/index\": \"./node_modules/jsconst/src/modules/CharCode/index.js\",\n\t\"./CharCode/index.js\": \"./node_modules/jsconst/src/modules/CharCode/index.js\",\n\t\"./Encoding\": \"./node_modules/jsconst/src/modules/Encoding.js\",\n\t\"./Encoding.js\": \"./node_modules/jsconst/src/modules/Encoding.js\",\n\t\"./HTML/RequestMethod\": \"./node_modules/jsconst/src/modules/HTML/RequestMethod.js\",\n\t\"./HTML/RequestMethod.js\": \"./node_modules/jsconst/src/modules/HTML/RequestMethod.js\",\n\t\"./HTML/StatusCode\": \"./node_modules/jsconst/src/modules/HTML/StatusCode.js\",\n\t\"./HTML/StatusCode.js\": \"./node_modules/jsconst/src/modules/HTML/StatusCode.js\",\n\t\"./HTML/Tag\": \"./node_modules/jsconst/src/modules/HTML/Tag.js\",\n\t\"./HTML/Tag.js\": \"./node_modules/jsconst/src/modules/HTML/Tag.js\",\n\t\"./HTML/TagAttribute/input\": \"./node_modules/jsconst/src/modules/HTML/TagAttribute/input.js\",\n\t\"./HTML/TagAttribute/input.js\": \"./node_modules/jsconst/src/modules/HTML/TagAttribute/input.js\",\n\t\"./HTML/Unit\": \"./node_modules/jsconst/src/modules/HTML/Unit.js\",\n\t\"./HTML/Unit.js\": \"./node_modules/jsconst/src/modules/HTML/Unit.js\",\n\t\"./MimeType\": \"./node_modules/jsconst/src/modules/MimeType.js\",\n\t\"./MimeType.js\": \"./node_modules/jsconst/src/modules/MimeType.js\",\n\t\"./RegxType\": \"./node_modules/jsconst/src/modules/RegxType.js\",\n\t\"./RegxType.js\": \"./node_modules/jsconst/src/modules/RegxType.js\",\n\t\"./XmlEntity\": \"./node_modules/jsconst/src/modules/XmlEntity.js\",\n\t\"./XmlEntity.js\": \"./node_modules/jsconst/src/modules/XmlEntity.js\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./node_modules/jsconst/src/modules sync recursive ^\\\\.\\\\/.*$\";\n\n//# sourceURL=webpack://hiton/./node_modules/jsconst/src/modules/_sync_^\\.\\/.*$?");

/***/ }),

/***/ "./node_modules/jsconst/src sync recursive":
/*!****************************************!*\
  !*** ./node_modules/jsconst/src/ sync ***!
  \****************************************/
/***/ ((module) => {

eval("function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = () => ([]);\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = \"./node_modules/jsconst/src sync recursive\";\nmodule.exports = webpackEmptyContext;\n\n//# sourceURL=webpack://hiton/./node_modules/jsconst/src/_sync?");

/***/ }),

/***/ "./src/dns.js":
/*!********************!*\
  !*** ./src/dns.js ***!
  \********************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("const index = __webpack_require__(/*! ./index */ \"./src/index.js\");\r\n\r\nif (typeof(window) !== 'undefined') {\r\n    window.HitOn = index;\r\n} else {\r\n    __webpack_require__.g.HitOn = index;\r\n}\n\n//# sourceURL=webpack://hiton/./src/dns.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((module, exports, __webpack_require__) => {

eval("__webpack_require__(/*! coralian */ \"./node_modules/coralian/src/index.js\");\r\nconst { aspectBase, getMappingCount } = __webpack_require__(/*! ./lib/utils */ \"./src/lib/utils.js\");\r\n\r\nconst { Char: { Space: { LF } } } = JsConst;\r\n\r\nconst NL_REGX = /  \\n/g,\r\n\t\tNEW_LINE_REGX = /(\\r\\n|\\r)/g,\r\n\t\tCOMMENT_REGX = /\\/\\*((.|\\s)*?)\\*\\//g;\r\nconst BR_TAG = \"<br />\";\r\nconst TWO_LF = `${LF}${LF}`;\r\n\r\nconst replaceSrcLinks = __webpack_require__(/*! ./modules/src-links */ \"./src/modules/src-links.js\");\r\nconst replaceImages = __webpack_require__(/*! ./modules/image */ \"./src/modules/image.js\");\r\nconst replaceAlign = __webpack_require__(/*! ./modules/align */ \"./src/modules/align.js\");\r\nconst replaceQuote = __webpack_require__(/*! ./modules/quote */ \"./src/modules/quote.js\");\r\nconst replaceList = __webpack_require__(/*! ./modules/list */ \"./src/modules/list.js\");\r\nconst replaceHeading = __webpack_require__(/*! ./modules/heading */ \"./src/modules/heading.js\");\r\nconst replaceTable = __webpack_require__(/*! ./modules/table */ \"./src/modules/table.js\");\r\nconst replaceRefValue = __webpack_require__(/*! ./modules/ref-value */ \"./src/modules/ref-value.js\");\r\nconst replaceInlineCode = __webpack_require__(/*! ./modules/inline-code */ \"./src/modules/inline-code.js\");\r\nconst reaplceEscapes = __webpack_require__(/*! ./modules/esacpes */ \"./src/modules/esacpes.js\");\r\nconst replaceInline = __webpack_require__(/*! ./modules/inline */ \"./src/modules/inline.js\");\r\nconst replavePreStruct = __webpack_require__(/*! ./modules/pre-struct */ \"./src/modules/pre-struct.js\");\r\n\r\nfunction parser (input, options = {}) {\r\n\ttry {\r\n\t\tinput = input.replace(NEW_LINE_REGX, LF);\r\n\t\tinput = input.replace(COMMENT_REGX, String.BLANK); // 去掉注释\r\n\r\n\t\t// 因为复杂结构可能含有 `__` 等字符，所以全部由 aspcet 形式来实现\r\n\t\tconst _replaceHeading = replaceHeading(options);\r\n\t\tconst _replaceSrcLinks = replaceSrcLinks(); // 外部连接（链接、邮箱）\r\n\t\tconst _replaceImages = replaceImages(options); // 图片（图片、图片引用）\r\n\t\tconst _replaceTable = replaceTable(); // 表格（表格、表格定义、表格引用）\r\n\t\tconst _replaceQuote = replaceQuote(); // 引用\r\n\t\tconst _replaceList = replaceList(); // 列表\r\n\t\tconst _replaceAlign = replaceAlign(); // 对齐\r\n\t\tconst _replaceRefValue = replaceRefValue(); // 参考（值）\r\n\t\tconst _replaceInlineCode = replaceInlineCode(); // 行内代码\r\n\t\tconst _reaplceEscapes = reaplceEscapes(); // 转义字符\r\n\t\tconst _replavePreStruct = replavePreStruct(); // 预定义结构\r\n\r\n\t\tconst output = [];\r\n\t\tArray.forEach(input.split(TWO_LF), (index, string) => {\r\n\r\n\t\t\tstring = LF + string + LF;\r\n\r\n\t\t\tstring = _reaplceEscapes.before(string);\r\n\t\t\tstring = _replaceInlineCode.before(string);\r\n\t\t\tstring = _replaceImages.before(string);\r\n\t\t\tstring = _replaceAlign.before(string);\r\n\t\t\tstring = _replaceSrcLinks.before(string);\r\n\t\t\tstring = _replaceTable.before(string);\r\n\t\t\tstring = _replaceHeading.before(string);\r\n\t\t\tstring = _replaceList.before(string);\r\n\t\t\tstring = _replaceRefValue.before(string);\r\n\t\t\tstring = _replavePreStruct.before(string);\r\n\t\t\tstring = _replaceQuote.before(string);\r\n\r\n\t\t\tstring = replaceInline(string); // 行内设置\r\n\r\n\t\t\tstring = _replaceQuote.after(string);\r\n\t\t\tstring = _replavePreStruct.after(string);\r\n\t\t\tstring = _replaceRefValue.after(string);\r\n\t\t\tstring = _replaceList.after(string);\r\n\t\t\tstring = _replaceHeading.after(string);\r\n\t\t\tstring = _replaceTable.after(string);\r\n\t\t\tstring = _replaceSrcLinks.after(string);\r\n\t\t\tstring = _replaceAlign.after(string);\r\n\t\t\tstring = _replaceImages.after(string);\r\n\t\t\tstring = _replaceInlineCode.after(string);\r\n\t\t\tstring = _reaplceEscapes.after(string);\r\n\r\n\t\t\tstring = string.replace(NL_REGX, BR_TAG); // 单行换行\r\n\r\n\t\t\toutput.push(string);\r\n\t\t});\r\n\r\n\t\tinput =  input = \"<p>\" + output.join(\"</p><p>\") + \"</p>\";\r\n\t} catch(err) {\r\n\t\tconsole.log(err);\r\n\t}\r\n\r\n\treturn `<div class=\"hiton\">${input}</div>`;\r\n}\r\n\r\nmodule.exports = exports = {\r\n\tcreate: (options, aspects = []) => {\r\n\r\n\t\tfunction replaceURI(str) {\r\n\r\n\t\t\ttry {\r\n\t\t\t\treturn decodeURIComponent(str);// 最后的转义出处理\r\n\t\t\t} catch (e) {\r\n\t\t\t\t// 如果出错，就当不存在，直接输出原始内容\r\n\t\t\t\treturn str;\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\treturn {\r\n\t\t\tparse: (str) => {\r\n\t\t\t\tArray.forEach(aspects, (index, aspect) => { // 定制插片前处理\r\n\t\t\t\t\tstr = aspect.before(str);\r\n\t\t\t\t});\r\n\r\n\t\t\t\tstr = parser(str, options);\r\n\r\n\t\t\t\t// 插片后处理\r\n\t\t\t\tArray.forEach(aspects, (index, aspcet) => {\r\n\t\t\t\t\tstr = aspcet.after(str);\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn replaceURI(str);\r\n\t\t\t}\r\n\t\t};\r\n\t},\r\n\tcreateAspect : (name, before) => {\r\n\t\tconst aspcet = aspectBase(name);\r\n\t\taspcet.before = before;\r\n\t\treturn aspcet;\r\n\t},\r\n\tgetMappingCount (name) {\r\n\t\treturn getMappingCount(name);\r\n\t}\r\n};\r\n\n\n//# sourceURL=webpack://hiton/./src/index.js?");

/***/ }),

/***/ "./src/lib/utils.js":
/*!**************************!*\
  !*** ./src/lib/utils.js ***!
  \**************************/
/***/ ((module, exports) => {

eval("/*\r\n * 这是插片（Aspect）的基类，由三个方法组成，\r\n * 1. before 抽象方法。前处理，因为每种插片的逻辑都不一致，所以需要每个子类自行实现\r\n * 2. replace 插片内容的替换方法，不需要子类重写\r\n * 3. after 后处理，将所有插片内容还原为 html 可显示内容\r\n */\r\nconst aspectBase = (aspcetName) => {\r\n\r\n\tconst spects = {};\r\n\r\n\treturn {\r\n\t\t// before 方法需要每个子类自行实现\r\n\t\treplace: (input, proto, value) => {\r\n\r\n\t\t\tlet code = (Date.now() * Math.random()).toString();\r\n\t\t\tcode = code.replace(\".\", \"--\");\r\n\r\n\t\t\tconst key = `${aspcetName}~${code}`;\r\n\t\t\tinput = input.replace(proto, key);\r\n\t\t\tspects[key] = value;\r\n\r\n\t\t\treturn input;\r\n\t\t},\r\n\t\tafter: (input) => {\r\n\t\t\tObject.forEach(spects, (key, val) => {\r\n\t\t\t\tinput = input.replace(key, val);\r\n\t\t\t});\r\n\r\n\t\t\treturn input;\r\n\t\t}\r\n\t}\r\n};\r\n\r\nconst mappings = {};\r\n\r\nfunction calcMappingCount () {\r\n\tconst mapping = {};\r\n\tlet counts = 1;\r\n\r\n\tfunction calcMapCount(name) {\r\n\t\tlet count = mapping[name];\r\n\t\tif (!count) {\r\n\t\t\tcount = mapping[name] = counts++;\r\n\t\t}\r\n\t\treturn count;\r\n\t}\r\n\r\n\treturn calcMapCount;\r\n}\r\n\r\nmodule.exports = exports = {\r\n    aspectBase,\r\n\tgetMappingCount (name) {\r\n\t\tlet method = mappings[name];\r\n\t\tif (!method) {\r\n\t\t\tmethod = mappings[name] = calcMappingCount();\r\n\t\t}\r\n\t\treturn method;\r\n\t}\r\n};\r\n\n\n//# sourceURL=webpack://hiton/./src/lib/utils.js?");

/***/ }),

/***/ "./src/modules/align.js":
/*!******************************!*\
  !*** ./src/modules/align.js ***!
  \******************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/**\r\n * 居中对齐 >>居中对齐<<\r\n * 左对齐  |:左对齐<<\r\n * 右对齐  >>右对齐:|\r\n */\r\nconst replaceInline = __webpack_require__(/*! ./inline */ \"./src/modules/inline.js\");\r\nconst { aspectBase } = __webpack_require__(/*! ./../lib/utils */ \"./src/lib/utils.js\");\r\nconst aspect = aspectBase(\"align\");\r\n\r\nconst \tCENTER_ALIGN_REGX = /\\n>>((.|\\s)+?)<<\\n/,\r\n\t\tLEFT_ALIGN_REGX = /\\n\\|\\:((.|\\s)+?)<<\\n/,\r\n\t\tRIGHT_ALIGN_REGX = /\\n>>((.|\\s)+?)\\:\\|\\n/;\r\n\r\nconst CENTER_ALIGN_STR = `<div class=\"hiton-align__center\">$1</div>`,\r\n\t\tLEFT_ALIGN_STR = `<div class=\"hiton-align__left\">$1</div>`,\r\n\t\tRIGHT_ALIGN_STR = `<div class=\"hiton-align__right\">$1</div>`;\r\n\r\nconst replaceAlign = () => {\r\n\r\n\taspect.before = (input) => {\r\n\t\twhile ((matches = input.match(CENTER_ALIGN_REGX)) !== null) {\r\n\t\t\tlet part = replaceInline(matches[0]);\r\n\t\t\tlet str = part.replace(CENTER_ALIGN_REGX, CENTER_ALIGN_STR);\r\n\t\t\tinput = aspect.replace(input, part, str);\r\n\t\t}\r\n\t\r\n\t\twhile ((matches = input.match(LEFT_ALIGN_REGX)) !== null) {\r\n\t\t\tlet part = replaceInline(matches[0]);\r\n\t\t\tlet str = part.replace(LEFT_ALIGN_REGX, LEFT_ALIGN_STR);\r\n\t\t\tinput = aspect.replace(input, part, str);\r\n\t\t}\r\n\t\r\n\t\twhile ((matches = input.match(RIGHT_ALIGN_REGX)) !== null) {\r\n\t\t\tlet part = replaceInline(matches[0]);\r\n\t\t\tlet str = part.replace(RIGHT_ALIGN_REGX, RIGHT_ALIGN_STR);\r\n\t\t\tinput = aspect.replace(input, part, str);\r\n\t\t}\r\n\t\r\n\t\treturn input;\r\n\t}\r\n\r\n\treturn aspect;\r\n};\r\n\r\nmodule.exports = exports = replaceAlign;\r\n\n\n//# sourceURL=webpack://hiton/./src/modules/align.js?");

/***/ }),

/***/ "./src/modules/esacpes.js":
/*!********************************!*\
  !*** ./src/modules/esacpes.js ***!
  \********************************/
/***/ ((module, exports, __webpack_require__) => {

eval("const { aspectBase } = __webpack_require__(/*! ./../lib/utils */ \"./src/lib/utils.js\");\r\nlet esacpes = aspectBase(\"esacpes\");\r\n\r\nconst ESCAPER_REGX = /\\\\(\\S)/;\r\n\r\nfunction replaceEscapes () {\r\n\tesacpes.before = input => {\r\n\t\twhile (matched = (ESCAPER_REGX.exec(input)) !== null) {\r\n\t\t\tlet [ proto, text ] = matched;\r\n\t\t\tinput = esacpes.replace(input, proto, text);\r\n\t\t}\r\n\t\treturn input;\r\n\t};\r\n\t\r\n\treturn esacpes;\r\n}\r\n\r\nmodule.exports = exports = replaceEscapes;\r\n\n\n//# sourceURL=webpack://hiton/./src/modules/esacpes.js?");

/***/ }),

/***/ "./src/modules/heading.js":
/*!********************************!*\
  !*** ./src/modules/heading.js ***!
  \********************************/
/***/ ((module, exports, __webpack_require__) => {

eval("const { aspectBase } = __webpack_require__(/*! ./../lib/utils */ \"./src/lib/utils.js\");\r\nconst aspect = aspectBase(\"heading\");\r\n\r\nconst { Char } = JsConst;\r\n\r\nconst BASIC_H6_REGX = /###### (.*?)(\\n|$)/g,\r\n\tBASIC_H5_REGX = /##### (.*?)(\\n|$)/g,\r\n\tBASIC_H4_REGX = /#### (.*?)(\\n|$)/g,\r\n\tBASIC_H3_REGX = /### (.*?)(\\n|$)/g,\r\n\tBASIC_H2_REGX = /## (.*?)(\\n|$)/g,\r\n\tBASIC_H1_REGX = /# (.*?)(\\n|$)/g,\r\n\tCOUNTING_H_REGX = /\\n(#{1,6}) (.*?)\\n/;\r\n\tconst BASIC_H6_STR = \"<h6>$1</h6>\",\r\n\tBASIC_H5_STR = \"<h5>$1</h5>\",\r\n\tBASIC_H4_STR = \"<h4>$1</h4>\",\r\n\tBASIC_H3_STR = \"<h3>$1</h3>\",\r\n\tBASIC_H2_STR = \"<h2>$1</h2>\",\r\n\tBASIC_H1_STR = \"<h1>$1</h1>\";\r\n\r\n\r\nconst COUNTING_MODE = \"COUNTING-MODE\";\r\n\r\nfunction basicMode (input) {\r\n\tinput = input.replace(BASIC_H6_REGX, BASIC_H6_STR); // 六级标题\r\n\tinput = input.replace(BASIC_H5_REGX, BASIC_H5_STR); // 五级标题\r\n\tinput = input.replace(BASIC_H4_REGX, BASIC_H4_STR); // 四级标题\r\n\tinput = input.replace(BASIC_H3_REGX, BASIC_H3_STR); // 三级标题\r\n\tinput = input.replace(BASIC_H2_REGX, BASIC_H2_STR); // 二级标题\r\n\tinput = input.replace(BASIC_H1_REGX, BASIC_H1_STR); // 一级标题\r\n\r\n\treturn input;\r\n}\r\n\r\nfunction highMode() {\r\n\r\n\tlet levelIndex = [ 0, 0, 0, 0, 0, 0 ], lastLevel = 0;\r\n\r\n\treturn (input) => {\r\n\t\twhile ((matched = COUNTING_H_REGX.exec(input)) !== null) {\r\n\t\t\tlet [ proto, level, text ] = matched;\r\n\t\t\tlevel = level.length;\r\n\t\t\ttext = text.trim();\r\n\r\n\t\t\tif (lastLevel > level) {\r\n\t\t\t\tfor (let i = level; i < levelIndex.length; i++) {\r\n\t\t\t\t\tlevelIndex[i] = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\tlevelIndex[level - 1]++;\r\n\t\t\tconst thisLevel = levelIndex.slice(0, level);\r\n\r\n\t\t\tconst chapter = thisLevel.join(Char.POINT);\r\n\t\t\tconst id = thisLevel.join(Char.UNDER_SOURCE);\r\n\t\t\tlastLevel = level;\r\n\t\r\n\t\t\tconst heading = `\\n<p id=\"h__${id}\" class=\"hiton-counting-mode-heading\">${chapter}. ${text}</p>\\n`;\r\n\t\t\tinput = aspect.replace(input, proto, heading);\r\n\t\t}\r\n\r\n\t\treturn input;\r\n\t}\r\n}\r\n\r\nfunction replaceHeading (options) {\r\n\r\n\t_highMode = highMode();\r\n\r\n\taspect.before = (input) => {\r\n\t\tconst method = (options.heading.toUpperCase() === COUNTING_MODE) ? _highMode : basicMode;\r\n\t\treturn method(input);\r\n\t}\r\n\r\n\treturn aspect;\r\n}\r\n\r\nmodule.exports = exports = replaceHeading;\r\n\n\n//# sourceURL=webpack://hiton/./src/modules/heading.js?");

/***/ }),

/***/ "./src/modules/image.js":
/*!******************************!*\
  !*** ./src/modules/image.js ***!
  \******************************/
/***/ ((module, exports, __webpack_require__) => {

eval("const { aspectBase, getMappingCount } = __webpack_require__(/*! ./../lib/utils */ \"./src/lib/utils.js\");\r\nconst aspect = aspectBase(\"image\");\r\nconst calcMapCount = getMappingCount(\"images\");\r\n\r\nconst IMAGE_REGX = /!\\[((.|\\s)*?)\\]\\(((.|\\s)*?)\\)/;\r\nconst IMAGE_CALLING_REGX = /!\\{((.|\\s)*?)\\}/;\r\n\r\nconst DEFAULT_ALIGN = \"left\";\r\n\r\nfunction replaceImages (options) {\r\n\r\n\tlet imageAlign = options.image ? options.image.align || DEFAULT_ALIGN : DEFAULT_ALIGN;\r\n\timageAlign = imageAlign.toLowerCase();\r\n\r\n\taspect.before = (input) => {\r\n\r\n\t\twhile((matched = IMAGE_REGX.exec(input)) !== null) {\r\n\t\t\tlet [ proto , name, , src ] = matched;\r\n\t\t\tconst count = calcMapCount(name);\r\n\r\n\t\t\tlet img = `<div id=\"p__${count}\" class=\"hiton-image hiton-align__${imageAlign}\"><img src=\"${src}\" />`;\r\n\t\t\timg += `<div class=\"hiton-image-name\">图：${name}</div></div>`;\r\n\r\n\t\t\tinput = aspect.replace(input, proto, img);\r\n\t\t}\r\n\r\n\t\twhile ((matched = IMAGE_CALLING_REGX.exec(input)) !== null) {\r\n\t\t\tlet [ proto, name ] = matched;\r\n\t\t\tconst count = calcMapCount(name);\r\n\r\n\t\t\tconst calling = `<div class=\"hiton-image-calling\"><a href=\"#p__${count}\">图：${name}</a></div>`;\r\n\t\t\tinput = aspect.replace(input, proto, calling);\r\n\t\t}\r\n\r\n\t\treturn input;\r\n\t}\r\n\r\n\treturn aspect;\r\n}\r\n\r\nmodule.exports = exports = replaceImages;\r\n\n\n//# sourceURL=webpack://hiton/./src/modules/image.js?");

/***/ }),

/***/ "./src/modules/inline-code.js":
/*!************************************!*\
  !*** ./src/modules/inline-code.js ***!
  \************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("const { aspectBase } = __webpack_require__(/*! ./../lib/utils */ \"./src/lib/utils.js\");\r\nlet inlineCode = aspectBase(\"inlinecode\");\r\n\r\nconst INLINE_CODE_REGX = /`([^`]+?)`/;\r\n\r\n\r\nfunction replaceInlineCode () {\r\n\r\n\tinlineCode.before = input => {\r\n\t\twhile ((matched = INLINE_CODE_REGX.exec(input)) !== null) {\r\n\t\t\tlet [ proto, text ] = matched;\r\n\t\t\tlet code = `<code class=\"hiton-span-margin hiton-span-bold hiton-inline-code\">${text}</code>`;\r\n\t\t\tinput = inlineCode.replace(input, proto, code);\r\n\t\t}\r\n\t\treturn input;\r\n\t};\r\n\r\n\treturn inlineCode;\r\n}\r\n\r\nmodule.exports = exports = replaceInlineCode;\r\n\n\n//# sourceURL=webpack://hiton/./src/modules/inline-code.js?");

/***/ }),

/***/ "./src/modules/inline.js":
/*!*******************************!*\
  !*** ./src/modules/inline.js ***!
  \*******************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\r\nconst { getMappingCount } = __webpack_require__(/*! ./../lib/utils */ \"./src/lib/utils.js\");\r\nconst calcMapCount = getMappingCount(\"refrence\");\r\n\r\nconst { HTML: { Unit, Tag } } = JsConst;\r\n\r\nconst unitSet = (() => {\r\n\tconst keys = Object.keys(Unit);\r\n\tconst unitVals = new Set();\r\n\r\n\tfor (const key of keys) {\r\n\t\tunitVals.add(Unit[key]);\r\n\t}\r\n\r\n\treturn unitVals;\r\n})();\r\nconst Unit_PX = Unit.PX;\r\n\r\nconst MarkMap = {\r\n\t\"^\": Tag.SUP,\r\n\t\"+\": Tag.SUB\r\n};\r\n\r\nconst \tITALIC_REGX = /_((.|\\s)*?)_/g,\r\n\t\tBOLD_REGX = /\\*\\*((.|\\s)*?)\\*\\*/g,\r\n\t\tDEL_LINE_REGX = /~~((.|\\s)*?)~~/g,\r\n\t\tINS_LINE_REGX = /==((.|\\s)*?)==/g,\r\n\t\tMARK_REGX = /!!((.|\\s)*?)!!/g,\r\n\t\tCOLOR_REGX = /#\\[([0-9a-fA-F]{6})\\]\\{(.*?)\\}/,\r\n\t\tFONT_REGX = /\\?\\[((\\d+)(.*?))\\]\\{(.*?)\\}/,\r\n\t\tPHONETIC_REGX = /::\\[(.*?)\\]\\{(.*?)\\}/,\r\n\t\tSUP_SUB_REGX = /~(\\^|\\+)\\{(.*?)\\}/,\r\n\t\tREF_USING_REGX = /\\[\\^(.+)\\]/;\r\n\r\nconst ITALIC_STR = `<em class=\"hiton-span-margin\">$1</em>`,\r\n\t\tBOLD_STR = `<strong class=\"hiton-span-margin\">$1</strong>`,\r\n\t\tDEL_LINE_STR = `<del class=\"hiton-span-margin\">$1</del>`,\r\n\t\tINS_LINE_STR = `<ins class=\"hiton-span-margin\">$1</ins>`,\r\n\t\tMARK_STR = `<mark class=\"hiton-span-margin\">$1</mark>`;\r\n\r\nfunction replaceColor (input) {\r\n\twhile ((matched = COLOR_REGX.exec(input)) !== null) {\r\n\t\tlet [ proto, color, value ] = matched;\r\n\r\n\t\tvalue = replaceInline(value);\r\n\t\tconst output = `<span style=\"color:#${color}\">${value}</span>`;\r\n\r\n\t\tinput = input.replace(proto, output);\r\n\t}\r\n\r\n\treturn input;\r\n}\r\n\r\nfunction replaceFont (input) {\r\n\twhile ((matched = FONT_REGX.exec(input)) !== null) {\r\n\t\tlet [ proto, ,size, unit, value ] = matched;\r\n\r\n\t\tunit = unitSet.has[unit.toLowerCase()] ? unit : Unit_PX;\r\n\r\n\t\tvalue = replaceInline(value);\r\n\t\tconst output = `<span style=\"font-size:${size}${unit};\">${value}</span>`;\r\n\r\n\t\tinput = input.replace(proto, output);\r\n\t}\r\n\r\n\treturn input;\r\n}\r\n\r\nfunction replacePhonetic (input) {\r\n\twhile ((matched = PHONETIC_REGX.exec(input)) !== null) {\r\n\t\tlet [ proto, text, pronunciation ] = matched;\r\n\r\n\t\ttext = replaceInline(text);\r\n\t\tconst output = `<ruby>${text}<rp>（</rp><rt>${pronunciation}</rt><rp>）</rp></ruby>`;\r\n\r\n\t\tinput = input.replace(proto, output);\r\n\t}\r\n\r\n\treturn input;\r\n}\r\n\r\nfunction replaceSupSub(input) {\r\n\twhile((matched = SUP_SUB_REGX.exec(input)) !== null) {\r\n\t\tlet [ proto, mark, value ] = matched;\r\n\r\n\t\tvalue = replaceInline(value);\r\n\t\tmark = MarkMap[mark];\r\n\r\n\t\tconst output = `<${mark}>${value}</${mark}>`;\r\n\r\n\t\tinput = input.replace(proto, output);\r\n\t}\r\n\r\n\treturn input;\r\n}\r\n\r\n// 因为参考的使用属于行内属性，所以就把参考的使用放在这里了\r\nfunction replaceRefUsing(input) {\r\n\twhile((matched = REF_USING_REGX.exec(input)) !== null) {\r\n\t\tconst [ proto, label ] = matched; \r\n\t\tconst count = calcMapCount(label);\r\n\r\n\t\tconst usingRef = `<sup id=\"rs__${count}\"><a href=\"#rv__${count}\">${label}</a></sup>`;\r\n\r\n\t\tinput = input.replace(proto, usingRef);\r\n\t}\r\n\r\n\treturn input;\r\n}\r\n\r\n/**\r\n * 这里的替换在任何位置都是行内属性\r\n * 链接中的文字\r\n * 对齐的文字\r\n */\r\nfunction replaceInline(input) {\r\n\r\n\tif (!input) return input;\r\n\r\n\tinput = input.replace(ITALIC_REGX, ITALIC_STR); // 斜体字\r\n\tinput = input.replace(BOLD_REGX, BOLD_STR); // 粗体字\r\n\tinput = input.replace(DEL_LINE_REGX, DEL_LINE_STR); // 删除线\r\n\tinput = input.replace(INS_LINE_REGX, INS_LINE_STR); // 下划线\r\n\tinput = input.replace(MARK_REGX, MARK_STR); // 文本高亮\r\n\r\n\tinput = replaceColor(input); // 颜色\r\n\tinput = replaceFont(input); // 字号\r\n\tinput = replacePhonetic(input); // 注音\r\n\tinput = replaceSupSub(input); // 上下标\r\n\tinput = replaceRefUsing(input); // 参考（引用）\r\n\r\n\treturn input;\r\n}\r\n\r\nmodule.exports = exports = replaceInline;\r\n\n\n//# sourceURL=webpack://hiton/./src/modules/inline.js?");

/***/ }),

/***/ "./src/modules/list.js":
/*!*****************************!*\
  !*** ./src/modules/list.js ***!
  \*****************************/
/***/ ((module, exports, __webpack_require__) => {

eval("const { aspectBase } = __webpack_require__(/*! ./../lib/utils */ \"./src/lib/utils.js\");\r\nconst aspect = aspectBase(\"list\");\r\n\r\nconst { Char: { Space: { LF } } } = JsConst;\r\nconst UL_REGX = /\\n(\\* [\\s\\S]+\\n)+/,\r\n\tOL_1_REGX = /\\n([0-9]+\\. [\\s\\S]+\\n)+/,\r\n\tOL_A_REGX = /\\n([a-zA-Z]+\\. [\\s\\S]+\\n)+/,\r\n\tUL_SPLIT_REGX = \"\\n\\* \",\r\n\tTYPE_1_SPLIT_REGX = /\\n[0-9]+\\. /g,\r\n\tTYPE_A_SPLIT_REGX = /\\n[a-zA-Z]+\\. /g;\r\n\r\nconst LI_START_TAG = \"<li>\",\r\n\tLI_END_TAG = \"</li>\",\r\n\tUL_START_TAG = \"<ul>\",\r\n\tUL_END_TAG = \"</ul>\",\r\n\tLI_JOIN = \"</li><li>\",\r\n\tOL_1_START_TAG = `<ol type=\"1\">`,\r\n\tOL_A_START_TAG = `<ol type=\"a\">`,\r\n\tOL_END_TAG = \"</ol>\";\r\n\r\nconst LIST_PARSE_REGX = /list~\\d+\\-\\-\\d+/;\r\n\r\nfunction replaceList() {\r\n\r\n\taspect.before = (input) => {\r\n\r\n\t\t// ul\r\n\t\twhile ((matches = input.match(UL_REGX)) !== null) {\r\n\t\t\tlet [ proto ] = matches;\r\n\t\t\tlet text = proto;\r\n\t\t\tconst output = [];\r\n\r\n\t\t\t// 用 \\n* 分割数据\r\n\t\t\ttext.split(UL_SPLIT_REGX).map(part => {\r\n\t\t\t\tif (part && part !== LF) {\r\n\t\t\t\t\t// 分割出来的再进行内部处理\r\n\t\t\t\t\tpart = part.split(LF).map(line => {\r\n\t\t\t\t\t\treturn line.trim();\r\n\t\t\t\t\t});\r\n\t\t\t\t\tpart = part.join(LF) + LF;\r\n\t\t\t\t\tpart = aspect.before(part);\r\n\t\t\t\t\toutput.push(part);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\ttext = UL_START_TAG + LI_START_TAG + output.join(LI_JOIN) + LI_END_TAG + UL_END_TAG;\r\n\t\t\tinput = aspect.replace(input, proto, text);\r\n\t\t}\r\n\r\n\t\t// ol 1\r\n\t\twhile ((matches = input.match(OL_1_REGX)) !== null) {\r\n\t\t\tlet [ proto ] = matches;\r\n\t\t\tlet text = proto;\r\n\t\t\tconst output = [];\r\n\r\n\t\t\t// 用 \\n* 分割数据\r\n\t\t\ttext.split(TYPE_1_SPLIT_REGX).map(part => {\r\n\t\t\t\tif (part && part !== LF) {\r\n\t\t\t\t\t// 分割出来的再进行内部处理\r\n\t\t\t\t\tpart = part.split(LF).map(line => {\r\n\t\t\t\t\t\treturn line.trim();\r\n\t\t\t\t\t});\r\n\t\t\t\t\tpart = part.join(LF) + LF;\r\n\t\t\t\t\tpart = aspect.before(part);\r\n\t\t\t\t\toutput.push(part);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\ttext = OL_1_START_TAG + LI_START_TAG + output.join(LI_JOIN) + LI_END_TAG + OL_END_TAG;\r\n\t\t\tinput = aspect.replace(input, proto, text);\r\n\t\t}\r\n\r\n\t\t// ol A\r\n\t\twhile ((matches = input.match(OL_A_REGX)) !== null) {\r\n\t\t\tlet [ proto ] = matches;\r\n\t\t\tlet text = proto;\r\n\t\t\tconst output = [];\r\n\r\n\t\t\t// 用 \\n* 分割数据\r\n\t\t\ttext.split(TYPE_A_SPLIT_REGX).map(part => {\r\n\t\t\t\tif (part && part !== LF) {\r\n\t\t\t\t\t// 分割出来的再进行内部处理\r\n\t\t\t\t\tpart = part.split(LF).map(line => {\r\n\t\t\t\t\t\treturn line.trim();\r\n\t\t\t\t\t});\r\n\t\t\t\t\tpart = part.join(LF) + LF;\r\n\t\t\t\t\tpart = aspect.before(part);\r\n\t\t\t\t\toutput.push(part);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\ttext = OL_A_START_TAG + LI_START_TAG + output.join(LI_JOIN) + LI_END_TAG + OL_END_TAG;\r\n\t\t\tinput = aspect.replace(input, proto, text);\r\n\t\t}\r\n\r\n\t\treturn input;\r\n\t}\r\n\r\n\t\r\n\t// 因为存在多重列表，所以这里需要多重恢复\r\n\tconst protoAfter = aspect.after;\r\n\taspect.after = (input) => {\r\n\t\twhile (LIST_PARSE_REGX.exec(input) !== null) {\r\n\t\t\tinput = protoAfter(input);\r\n\t\t}\r\n\r\n\t\treturn input;\r\n\t}\r\n\r\n\treturn aspect;\r\n};\r\n\r\nmodule.exports = exports = replaceList;\r\n\n\n//# sourceURL=webpack://hiton/./src/modules/list.js?");

/***/ }),

/***/ "./src/modules/pre-struct.js":
/*!***********************************!*\
  !*** ./src/modules/pre-struct.js ***!
  \***********************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/**\r\n * [[\r\n *   ababa\r\n *   ababa\r\n *   ababa\r\n * ]]\r\n * => \r\n * <pre>\r\n *   ababa\r\n *   ababa\r\n *   ababa\r\n * </pre>\r\n * pre 的内部结构只支持行内元素的解析\r\n */\r\nconst replaceInline = __webpack_require__(/*! ./inline */ \"./src/modules/inline.js\");\r\nconst { aspectBase } = __webpack_require__(/*! ./..//lib/utils */ \"./src/lib/utils.js\");\r\nconst aspect = aspectBase(\"pre-struct\");\r\n\r\nconst { Char: { Space: { LF } } } = JsConst;\r\n\r\nconst PRE_STRUCT_REGX = /\\n\\[\\[\\n([\\s\\S]+\\n)\\]\\]\\n/,\r\n        NL_REGX = /\\n  /;\r\n\r\nfunction replavePreStruct () {\r\n\r\n\taspect.before = (input) => {\r\n\t\twhile((matched = PRE_STRUCT_REGX.exec(input)) !== null) {\r\n\t\t\tlet [ proto, text ] = matched; \r\n\r\n            text = text.split(LF).map(line => {\r\n                return line.trim();\r\n            });\r\n            text = text.join(LF);\r\n\t\t\ttext = replaceInline(text);\r\n\r\n\t\t\tconst pre = `<pre class=\"hiton-pre-struct\">${text}</pre>`;\r\n\r\n\t\t\tinput = aspect.replace(input, proto, pre);\r\n\t\t}\r\n\r\n\t\treturn input;\r\n\t}\r\n\r\n\treturn aspect;\r\n}\r\n\r\nmodule.exports = exports = replavePreStruct;\r\n\n\n//# sourceURL=webpack://hiton/./src/modules/pre-struct.js?");

/***/ }),

/***/ "./src/modules/quote.js":
/*!******************************!*\
  !*** ./src/modules/quote.js ***!
  \******************************/
/***/ ((module, exports, __webpack_require__) => {

eval("const { aspectBase } = __webpack_require__(/*! ./../lib/utils */ \"./src/lib/utils.js\");\r\nconst aspect = aspectBase(\"quote\");\r\n\r\nconst { Char: { Parenthe, Space: { LF } } } = JsConst;\r\n\r\nconst MAIN_QUOT_REGX = /(\\n(>(.*)\\n)+)/,\r\n\tNL_RT_ANGLE_GLOBAL_REGX = /\\n>/g;\r\nconst STRING_QUOTE = \"引用\";\r\nconst QUOTE_PARSE_REGX = /quote~\\d+\\-\\-\\d+/;\r\n\r\nfunction replaceQuote() {\r\n\r\n\taspect.before = (input) => {\r\n\t\twhile ((matchded = MAIN_QUOT_REGX.exec(input)) !== null) { // 获取>列表行，从 \\n> 开始 到 >\\n 结束，中间每行都以 > 开头 \\n 结束\r\n\t\t\tlet protoQuotTxt = matchded[0];\r\n\t\t\tlet quotTxt = protoQuotTxt.replace(NL_RT_ANGLE_GLOBAL_REGX, LF); // 去掉每行开头的 >(&gt;)\r\n\t\t\tquotTxt = quotTxt.slice(1); // 去掉第一行的换行符\r\n\t\t\tlet indexNL = quotTxt.indexOf(LF);\r\n\t\r\n\t\t\tlet quotTtlLn = quotTxt.slice(0, indexNL);\r\n\t\t\tlet hasQuotTtl = String.startsWith(quotTtlLn, Parenthe.LEFT) && String.endsWith(quotTtlLn, Parenthe.RIGHT);\r\n\t\r\n\t\t\tlet legend = hasQuotTtl ? quotTtlLn.slice(1, quotTtlLn.length - 1) : STRING_QUOTE;\r\n\t\t\tlet outTxt = hasQuotTtl ? quotTxt.slice(indexNL + 1) : quotTxt;\r\n\t\r\n\t\t\t// 每行的去空格操作\r\n\t\t\toutTxt = outTxt.split(LF).map((txt) => {\r\n\t\t\t\ttxt = txt.trim();\r\n\t\t\t\treturn txt;\r\n\t\t\t});\r\n\t\t\toutTxt = outTxt.join(LF);\r\n\t\r\n\t\t\toutTxt = aspect.before(outTxt); // 递归查找看是否有多重引用\r\n\t\t\tconst quote = `<fieldset><legend>${legend}</legend>${outTxt}</fieldset>`;\r\n\t\t\tinput = aspect.replace(input, protoQuotTxt, quote);\r\n\t\t}\r\n\t\r\n\t\treturn input;\r\n\t}\r\n\r\n\t// 因为存在多重引用，所以这里需要多重恢复\r\n\tconst protoAfter = aspect.after;\r\n\taspect.after = (input) => {\r\n\t\twhile (QUOTE_PARSE_REGX.exec(input) !== null) {\r\n\t\t\tinput = protoAfter(input);\r\n\t\t}\r\n\r\n\t\treturn input;\r\n\t}\r\n\r\n\treturn aspect;\r\n}\r\n\r\nmodule.exports = exports = replaceQuote;\r\n\n\n//# sourceURL=webpack://hiton/./src/modules/quote.js?");

/***/ }),

/***/ "./src/modules/ref-value.js":
/*!**********************************!*\
  !*** ./src/modules/ref-value.js ***!
  \**********************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/**\r\n * 因为参考的引用和值属于两种类型，所以这里分开实现\r\n *\r\n * [^注1] => <a id=\"c-a-1\" href=\"#c-v-1\"><sup>注1</sup></a>\r\n *\r\n * [^注1]: => <div>注1：balaba <a hre=\"#c-a-1\">返回</a></div>\r\n */\r\nconst replaceInline = __webpack_require__(/*! ./inline */ \"./src/modules/inline.js\");\r\nconst { aspectBase, getMappingCount } = __webpack_require__(/*! ./..//lib/utils */ \"./src/lib/utils.js\");\r\nconst aspect = aspectBase(\"reference\");\r\nconst calcMapCount = getMappingCount(\"refrence\");\r\n\r\nconst REF_VALUE_REGX = /\\n\\[\\^(.+)\\]: (.+)\\n/;\r\n\r\nfunction replaceRefValue () {\r\n\r\n\taspect.before = (input) => {\r\n\r\n\t\twhile((matched = REF_VALUE_REGX.exec(input)) !== null) {\r\n\t\t\tlet [ proto, label, text ] = matched; \r\n\t\t\tconst count = calcMapCount(label);\r\n\r\n\t\t\ttext = replaceInline(text);\r\n\t\t\tconst valRef = `<div class=\"hiton-ref-value\" id=\"rv__${count}\"><a href=\"#rs__${count}\">${label}</a>：${text}<a href=\"#rs__${count}\">↰</a></div>`;\r\n\r\n\t\t\tinput = aspect.replace(input, proto, valRef);\r\n\t\t}\r\n\r\n\t\treturn input;\r\n\t}\r\n\r\n\treturn aspect;\r\n}\r\n\r\nmodule.exports = exports = replaceRefValue;\r\n\n\n//# sourceURL=webpack://hiton/./src/modules/ref-value.js?");

/***/ }),

/***/ "./src/modules/src-links.js":
/*!**********************************!*\
  !*** ./src/modules/src-links.js ***!
  \**********************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/**\r\n * [](www.baidu.com) => <a href=\"www.baidu.com\">www.baidu.com</a>\r\n * [百度](www.baidu.com) => <a href=\"www.baidu.com\">百度</a>\r\n * [](www.baidu.com \"百度一下，你就知道\") => <a title=\"百度一下，你就知道\" href=\"www.baidu.com\">www.baidu.com</a>\r\n * [百度](www.baidu.com \"百度一下，你就知道\") => <a title=\"百度一下，你就知道\" href=\"www.baidu.com\">百度</a>\r\n * \r\n * <hzwaygc@gmail.com> => <a href=\"mailto:hzwaygc@gmail.com\">hzwaygc@gmail.com</a>\r\n */\r\nconst replaceInline = __webpack_require__(/*! ./inline */ \"./src/modules/inline.js\");\r\nconst { aspectBase } = __webpack_require__(/*! ./../lib/utils */ \"./src/lib/utils.js\");\r\nconst aspect = aspectBase(\"links\");\r\n\r\nconst LINK_REGX = /\\[((.|\\s)*?)\\]\\(((.|\\s)*?)( \"(.*?)\")*\\)/;\r\nconst MAIL_REGX = /<([a-zA-Z_\\-0-9]+@[a-zA-Z_\\-0-9]+(\\.[a-zA-Z_\\-0-9]+)+)>/;\r\n\r\nconst replaceSrcLinks = () => {\r\n\r\n\taspect.before = (input) => {\r\n\t\twhile ((matched = LINK_REGX.exec(input)) !== null) {\r\n\t\t\tlet [ proto , label, , href, , title ] = matched;\r\n\t\r\n\t\t\tlabel = label ? replaceInline(label) : href;\r\n\t\t\ttitle = title ? `title=${title}` : String.BLANK;\r\n\t\r\n\t\t\tconst link = `<a ${title} href=\"${href}\">${label}</a>`;\r\n\t\t\tinput = aspect.replace(input, proto, link);\r\n\t\t}\r\n\t\r\n\t\twhile ((matched = MAIL_REGX.exec(input)) !== null) {\r\n\t\t\tconst [ proto, href ] = matched;\r\n\t\r\n\t\t\tconst mailto = `<a href=\"mailto:${href}\">${href}</a>`;\r\n\t\t\tinput = aspect.replace(input, proto, mailto);\r\n\t\t}\r\n\t\r\n\t\treturn input;\r\n\t}\r\n\r\n\treturn aspect;\r\n}\r\n\r\nmodule.exports = exports = replaceSrcLinks;\r\n\n\n//# sourceURL=webpack://hiton/./src/modules/src-links.js?");

/***/ }),

/***/ "./src/modules/table.js":
/*!******************************!*\
  !*** ./src/modules/table.js ***!
  \******************************/
/***/ ((module, exports, __webpack_require__) => {

eval("const replaceInline = __webpack_require__(/*! ./inline */ \"./src/modules/inline.js\");\r\nconst { aspectBase, getMappingCount } = __webpack_require__(/*! ./../lib/utils */ \"./src/lib/utils.js\");\r\nconst aspect = aspectBase(\"table\");\r\nconst calcMapCount = getMappingCount(\"table\");\r\n\r\nconst { Char: { Space } } =JsConst;\r\nconst TABLE_REGX = /(\\|(.)+\\|\\n)+/,\r\n\tVERTICAL_BAR = /\\|/g,\r\n\tTABLE_DEFINE_REGX = /@\\{(.+)\\}/,\r\n\tTABLE_CALLING_REGX =/@:\\{(.+)\\}/;\r\nconst TR_JOIN = \"</tr><tr>\",\r\n\tTD_JOIN = \"</td><td>\",\r\n\tTD_START = \"<td>\",\r\n\tTD_END = \"</td>\",\r\n\tTH_JOIN = \"</th><th>\",\r\n\tTH_START = \"<th>\",\r\n\tTH_END = \"</th>\",\r\n\tTHEAD_START = \"<thead><tr>\",\r\n\tTHEAD_END = \"</tr></thead>\",\r\n\tTBODY_START = \"<tbody><tr>\",\r\n\tTBODY_END = \"</tr></tbody>\",\r\n\tTABLE_START = `<table class=\"hiton-table\">`,\r\n\tTABLE_END = \"</table>\";\r\n\r\n\r\nconst replaceTable = () => {\r\n\r\n\taspect.before = (input) => {\r\n\t\t// 表格\r\n\t\twhile ((matches = input.match(TABLE_REGX)) !== null) {\r\n\t\t\tconst proto = matches[0], output = [];\r\n\t\t\tlet tHead = \"\";\r\n\r\n\t\t\tArray.forEach(proto.split(Space.LF), (index, line) => {\r\n\t\t\t\tif (String.isEmpty(line)) return;\r\n\t\t\t\tline = line.slice(1, line.length - 1); // 去掉最开始和最后的 |\r\n\t\t\t\tline = line.split(VERTICAL_BAR).map(td => {\r\n\t\t\t\t\ttd = td.trim();\r\n\t\t\t\t\ttd = replaceInline(td); // 递归调用\r\n\t\t\t\t\treturn td;\r\n\t\t\t\t});\r\n\t\t\t\tif (index === 0) {\r\n\t\t\t\t\ttHead = THEAD_START + TH_START + line.join(TH_JOIN) + TH_END + THEAD_END;\r\n\t\t\t\t} else if (index === 1) {\r\n\t\t\t\t\t// TODO 表的第二行定义暂时不做处理\r\n\t\t\t\t} else {\r\n\t\t\t\t\toutput.push(TD_START + line.join(TD_JOIN) + TD_END);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tlet table = TABLE_START + tHead + TBODY_START + output.join(TR_JOIN) + TBODY_END + TABLE_END;\r\n\r\n\t\t\tinput = aspect.replace(input, proto, table);\r\n\t\t}\r\n\r\n\t\t// 表格声明\r\n\t\twhile ((matched = TABLE_DEFINE_REGX.exec(input)) !== null) {\r\n\t\t\tconst [ proto, name ] = matched;\r\n\t\t\tconst count = calcMapCount(name);\r\n\r\n\t\t\tconst define = `<div id=\"t__${count}\" class=\"hiton-table-define\">表：${name}</div>`;\r\n\t\t\tinput = aspect.replace(input, proto, define);\r\n\t\t}\r\n\t\t// 表格引用\r\n\t\twhile ((matched = TABLE_CALLING_REGX.exec(input)) !== null) {\r\n\t\t\tconst [ proto, name ] = matched;\r\n\t\t\tconst count = calcMapCount(name);\r\n\r\n\t\t\tconst calling = `<a class=\"hiton-span-bold hiton-span-margin hiton-table-calling\" href=\"#t__${count}\">表：${name}</a>`;\r\n\t\t\tinput = aspect.replace(input, proto, calling);\r\n\t\t}\r\n\r\n\t\treturn input;\r\n\t}\r\n\r\n\treturn aspect;\r\n}\r\n\r\nmodule.exports = exports = replaceTable;\r\n\n\n//# sourceURL=webpack://hiton/./src/modules/table.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/dns.js");
/******/ 	
/******/ })()
;